
Lec_4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000fa8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000056  00800060  00000fa8  0000103c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  008000b6  008000b6  00001092  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001092  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000010c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004d8  00000000  00000000  00001100  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003a79  00000000  00000000  000015d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000124d  00000000  00000000  00005051  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001fc2  00000000  00000000  0000629e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000e04  00000000  00000000  00008260  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001512  00000000  00000000  00009064  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002c57  00000000  00000000  0000a576  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000430  00000000  00000000  0000d1cd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 c3 05 	jmp	0xb86	; 0xb86 <__vector_1>
   8:	0c 94 ed 05 	jmp	0xbda	; 0xbda <__vector_2>
   c:	0c 94 17 06 	jmp	0xc2e	; 0xc2e <__vector_3>
  10:	0c 94 13 07 	jmp	0xe26	; 0xe26 <__vector_4>
  14:	0c 94 e9 06 	jmp	0xdd2	; 0xdd2 <__vector_5>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 bf 06 	jmp	0xd7e	; 0xd7e <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 95 06 	jmp	0xd2a	; 0xd2a <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 6b 06 	jmp	0xcd6	; 0xcd6 <__vector_11>
  30:	0c 94 41 06 	jmp	0xc82	; 0xc82 <__vector_12>
  34:	0c 94 3d 07 	jmp	0xe7a	; 0xe7a <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 67 07 	jmp	0xece	; 0xece <__vector_15>
  40:	0c 94 76 03 	jmp	0x6ec	; 0x6ec <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ea       	ldi	r30, 0xA8	; 168
  68:	ff e0       	ldi	r31, 0x0F	; 15
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 3b       	cpi	r26, 0xB6	; 182
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 eb       	ldi	r26, 0xB6	; 182
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 3b       	cpi	r26, 0xBE	; 190
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 6f 02 	call	0x4de	; 0x4de <main>
  8a:	0c 94 d2 07 	jmp	0xfa4	; 0xfa4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <KEYPAD_Init>:
#define  F_CPU	8000000
#include <util/delay.h>


void KEYPAD_Init(void)
{
  92:	cf 93       	push	r28
	for(u8 r=0; r<ROWS; r++)
  94:	c0 e0       	ldi	r28, 0x00	; 0
  96:	06 c0       	rjmp	.+12     	; 0xa4 <KEYPAD_Init+0x12>
	{
		DIO_WritePin(FIRST_OUTPUT-r,HIGH);
  98:	61 e0       	ldi	r22, 0x01	; 1
  9a:	85 e1       	ldi	r24, 0x15	; 21
  9c:	8c 1b       	sub	r24, r28
  9e:	0e 94 ac 04 	call	0x958	; 0x958 <DIO_WritePin>
#include <util/delay.h>


void KEYPAD_Init(void)
{
	for(u8 r=0; r<ROWS; r++)
  a2:	cf 5f       	subi	r28, 0xFF	; 255
  a4:	c4 30       	cpi	r28, 0x04	; 4
  a6:	c0 f3       	brcs	.-16     	; 0x98 <KEYPAD_Init+0x6>
	{
		DIO_WritePin(FIRST_OUTPUT-r,HIGH);
	}
}
  a8:	cf 91       	pop	r28
  aa:	08 95       	ret

000000ac <WriteInst>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ac:	cf 93       	push	r28
  ae:	c8 2f       	mov	r28, r24
  b0:	60 e0       	ldi	r22, 0x00	; 0
  b2:	83 e0       	ldi	r24, 0x03	; 3
  b4:	0e 94 ac 04 	call	0x958	; 0x958 <DIO_WritePin>
  b8:	6c 2f       	mov	r22, r28
  ba:	66 1f       	adc	r22, r22
  bc:	66 27       	eor	r22, r22
  be:	66 1f       	adc	r22, r22
  c0:	8c e0       	ldi	r24, 0x0C	; 12
  c2:	0e 94 ac 04 	call	0x958	; 0x958 <DIO_WritePin>
  c6:	c6 fb       	bst	r28, 6
  c8:	66 27       	eor	r22, r22
  ca:	60 f9       	bld	r22, 0
  cc:	8b e0       	ldi	r24, 0x0B	; 11
  ce:	0e 94 ac 04 	call	0x958	; 0x958 <DIO_WritePin>
  d2:	c5 fb       	bst	r28, 5
  d4:	66 27       	eor	r22, r22
  d6:	60 f9       	bld	r22, 0
  d8:	89 e0       	ldi	r24, 0x09	; 9
  da:	0e 94 ac 04 	call	0x958	; 0x958 <DIO_WritePin>
  de:	c4 fb       	bst	r28, 4
  e0:	66 27       	eor	r22, r22
  e2:	60 f9       	bld	r22, 0
  e4:	88 e0       	ldi	r24, 0x08	; 8
  e6:	0e 94 ac 04 	call	0x958	; 0x958 <DIO_WritePin>
  ea:	61 e0       	ldi	r22, 0x01	; 1
  ec:	84 e0       	ldi	r24, 0x04	; 4
  ee:	0e 94 ac 04 	call	0x958	; 0x958 <DIO_WritePin>
  f2:	8f ec       	ldi	r24, 0xCF	; 207
  f4:	97 e0       	ldi	r25, 0x07	; 7
  f6:	01 97       	sbiw	r24, 0x01	; 1
  f8:	f1 f7       	brne	.-4      	; 0xf6 <WriteInst+0x4a>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <WriteInst+0x50>
  fc:	00 00       	nop
  fe:	60 e0       	ldi	r22, 0x00	; 0
 100:	84 e0       	ldi	r24, 0x04	; 4
 102:	0e 94 ac 04 	call	0x958	; 0x958 <DIO_WritePin>
 106:	8f ec       	ldi	r24, 0xCF	; 207
 108:	97 e0       	ldi	r25, 0x07	; 7
 10a:	01 97       	sbiw	r24, 0x01	; 1
 10c:	f1 f7       	brne	.-4      	; 0x10a <WriteInst+0x5e>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <WriteInst+0x64>
 110:	00 00       	nop
 112:	c3 fb       	bst	r28, 3
 114:	66 27       	eor	r22, r22
 116:	60 f9       	bld	r22, 0
 118:	8c e0       	ldi	r24, 0x0C	; 12
 11a:	0e 94 ac 04 	call	0x958	; 0x958 <DIO_WritePin>
 11e:	c2 fb       	bst	r28, 2
 120:	66 27       	eor	r22, r22
 122:	60 f9       	bld	r22, 0
 124:	8b e0       	ldi	r24, 0x0B	; 11
 126:	0e 94 ac 04 	call	0x958	; 0x958 <DIO_WritePin>
 12a:	c1 fb       	bst	r28, 1
 12c:	66 27       	eor	r22, r22
 12e:	60 f9       	bld	r22, 0
 130:	89 e0       	ldi	r24, 0x09	; 9
 132:	0e 94 ac 04 	call	0x958	; 0x958 <DIO_WritePin>
 136:	6c 2f       	mov	r22, r28
 138:	61 70       	andi	r22, 0x01	; 1
 13a:	88 e0       	ldi	r24, 0x08	; 8
 13c:	0e 94 ac 04 	call	0x958	; 0x958 <DIO_WritePin>
 140:	61 e0       	ldi	r22, 0x01	; 1
 142:	84 e0       	ldi	r24, 0x04	; 4
 144:	0e 94 ac 04 	call	0x958	; 0x958 <DIO_WritePin>
 148:	8f ec       	ldi	r24, 0xCF	; 207
 14a:	97 e0       	ldi	r25, 0x07	; 7
 14c:	01 97       	sbiw	r24, 0x01	; 1
 14e:	f1 f7       	brne	.-4      	; 0x14c <WriteInst+0xa0>
 150:	00 c0       	rjmp	.+0      	; 0x152 <WriteInst+0xa6>
 152:	00 00       	nop
 154:	60 e0       	ldi	r22, 0x00	; 0
 156:	84 e0       	ldi	r24, 0x04	; 4
 158:	0e 94 ac 04 	call	0x958	; 0x958 <DIO_WritePin>
 15c:	8f ec       	ldi	r24, 0xCF	; 207
 15e:	97 e0       	ldi	r25, 0x07	; 7
 160:	01 97       	sbiw	r24, 0x01	; 1
 162:	f1 f7       	brne	.-4      	; 0x160 <WriteInst+0xb4>
 164:	00 c0       	rjmp	.+0      	; 0x166 <WriteInst+0xba>
 166:	00 00       	nop
 168:	cf 91       	pop	r28
 16a:	08 95       	ret

0000016c <WriteData>:
 16c:	cf 93       	push	r28
 16e:	c8 2f       	mov	r28, r24
 170:	61 e0       	ldi	r22, 0x01	; 1
 172:	83 e0       	ldi	r24, 0x03	; 3
 174:	0e 94 ac 04 	call	0x958	; 0x958 <DIO_WritePin>
 178:	6c 2f       	mov	r22, r28
 17a:	66 1f       	adc	r22, r22
 17c:	66 27       	eor	r22, r22
 17e:	66 1f       	adc	r22, r22
 180:	8c e0       	ldi	r24, 0x0C	; 12
 182:	0e 94 ac 04 	call	0x958	; 0x958 <DIO_WritePin>
 186:	c6 fb       	bst	r28, 6
 188:	66 27       	eor	r22, r22
 18a:	60 f9       	bld	r22, 0
 18c:	8b e0       	ldi	r24, 0x0B	; 11
 18e:	0e 94 ac 04 	call	0x958	; 0x958 <DIO_WritePin>
 192:	c5 fb       	bst	r28, 5
 194:	66 27       	eor	r22, r22
 196:	60 f9       	bld	r22, 0
 198:	89 e0       	ldi	r24, 0x09	; 9
 19a:	0e 94 ac 04 	call	0x958	; 0x958 <DIO_WritePin>
 19e:	c4 fb       	bst	r28, 4
 1a0:	66 27       	eor	r22, r22
 1a2:	60 f9       	bld	r22, 0
 1a4:	88 e0       	ldi	r24, 0x08	; 8
 1a6:	0e 94 ac 04 	call	0x958	; 0x958 <DIO_WritePin>
 1aa:	61 e0       	ldi	r22, 0x01	; 1
 1ac:	84 e0       	ldi	r24, 0x04	; 4
 1ae:	0e 94 ac 04 	call	0x958	; 0x958 <DIO_WritePin>
 1b2:	8f ec       	ldi	r24, 0xCF	; 207
 1b4:	97 e0       	ldi	r25, 0x07	; 7
 1b6:	01 97       	sbiw	r24, 0x01	; 1
 1b8:	f1 f7       	brne	.-4      	; 0x1b6 <WriteData+0x4a>
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <WriteData+0x50>
 1bc:	00 00       	nop
 1be:	60 e0       	ldi	r22, 0x00	; 0
 1c0:	84 e0       	ldi	r24, 0x04	; 4
 1c2:	0e 94 ac 04 	call	0x958	; 0x958 <DIO_WritePin>
 1c6:	8f ec       	ldi	r24, 0xCF	; 207
 1c8:	97 e0       	ldi	r25, 0x07	; 7
 1ca:	01 97       	sbiw	r24, 0x01	; 1
 1cc:	f1 f7       	brne	.-4      	; 0x1ca <WriteData+0x5e>
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <WriteData+0x64>
 1d0:	00 00       	nop
 1d2:	c3 fb       	bst	r28, 3
 1d4:	66 27       	eor	r22, r22
 1d6:	60 f9       	bld	r22, 0
 1d8:	8c e0       	ldi	r24, 0x0C	; 12
 1da:	0e 94 ac 04 	call	0x958	; 0x958 <DIO_WritePin>
 1de:	c2 fb       	bst	r28, 2
 1e0:	66 27       	eor	r22, r22
 1e2:	60 f9       	bld	r22, 0
 1e4:	8b e0       	ldi	r24, 0x0B	; 11
 1e6:	0e 94 ac 04 	call	0x958	; 0x958 <DIO_WritePin>
 1ea:	c1 fb       	bst	r28, 1
 1ec:	66 27       	eor	r22, r22
 1ee:	60 f9       	bld	r22, 0
 1f0:	89 e0       	ldi	r24, 0x09	; 9
 1f2:	0e 94 ac 04 	call	0x958	; 0x958 <DIO_WritePin>
 1f6:	6c 2f       	mov	r22, r28
 1f8:	61 70       	andi	r22, 0x01	; 1
 1fa:	88 e0       	ldi	r24, 0x08	; 8
 1fc:	0e 94 ac 04 	call	0x958	; 0x958 <DIO_WritePin>
 200:	61 e0       	ldi	r22, 0x01	; 1
 202:	84 e0       	ldi	r24, 0x04	; 4
 204:	0e 94 ac 04 	call	0x958	; 0x958 <DIO_WritePin>
 208:	8f ec       	ldi	r24, 0xCF	; 207
 20a:	97 e0       	ldi	r25, 0x07	; 7
 20c:	01 97       	sbiw	r24, 0x01	; 1
 20e:	f1 f7       	brne	.-4      	; 0x20c <WriteData+0xa0>
 210:	00 c0       	rjmp	.+0      	; 0x212 <WriteData+0xa6>
 212:	00 00       	nop
 214:	60 e0       	ldi	r22, 0x00	; 0
 216:	84 e0       	ldi	r24, 0x04	; 4
 218:	0e 94 ac 04 	call	0x958	; 0x958 <DIO_WritePin>
 21c:	8f ec       	ldi	r24, 0xCF	; 207
 21e:	97 e0       	ldi	r25, 0x07	; 7
 220:	01 97       	sbiw	r24, 0x01	; 1
 222:	f1 f7       	brne	.-4      	; 0x220 <WriteData+0xb4>
 224:	00 c0       	rjmp	.+0      	; 0x226 <WriteData+0xba>
 226:	00 00       	nop
 228:	cf 91       	pop	r28
 22a:	08 95       	ret

0000022c <LCD_Init>:
 22c:	2f e7       	ldi	r18, 0x7F	; 127
 22e:	88 e3       	ldi	r24, 0x38	; 56
 230:	91 e0       	ldi	r25, 0x01	; 1
 232:	21 50       	subi	r18, 0x01	; 1
 234:	80 40       	sbci	r24, 0x00	; 0
 236:	90 40       	sbci	r25, 0x00	; 0
 238:	e1 f7       	brne	.-8      	; 0x232 <LCD_Init+0x6>
 23a:	00 c0       	rjmp	.+0      	; 0x23c <LCD_Init+0x10>
 23c:	00 00       	nop
 23e:	82 e0       	ldi	r24, 0x02	; 2
 240:	0e 94 56 00 	call	0xac	; 0xac <WriteInst>
 244:	88 e2       	ldi	r24, 0x28	; 40
 246:	0e 94 56 00 	call	0xac	; 0xac <WriteInst>
 24a:	8c e0       	ldi	r24, 0x0C	; 12
 24c:	0e 94 56 00 	call	0xac	; 0xac <WriteInst>
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	0e 94 56 00 	call	0xac	; 0xac <WriteInst>
 256:	8f ec       	ldi	r24, 0xCF	; 207
 258:	97 e0       	ldi	r25, 0x07	; 7
 25a:	01 97       	sbiw	r24, 0x01	; 1
 25c:	f1 f7       	brne	.-4      	; 0x25a <LCD_Init+0x2e>
 25e:	00 c0       	rjmp	.+0      	; 0x260 <LCD_Init+0x34>
 260:	00 00       	nop
 262:	86 e0       	ldi	r24, 0x06	; 6
 264:	0e 94 56 00 	call	0xac	; 0xac <WriteInst>
 268:	08 95       	ret

0000026a <LCD_GoTo>:
 26a:	81 11       	cpse	r24, r1
 26c:	05 c0       	rjmp	.+10     	; 0x278 <LCD_GoTo+0xe>
 26e:	80 e8       	ldi	r24, 0x80	; 128
 270:	86 0f       	add	r24, r22
 272:	0e 94 56 00 	call	0xac	; 0xac <WriteInst>
 276:	08 95       	ret
 278:	81 30       	cpi	r24, 0x01	; 1
 27a:	29 f4       	brne	.+10     	; 0x286 <LCD_GoTo+0x1c>
 27c:	80 ec       	ldi	r24, 0xC0	; 192
 27e:	86 0f       	add	r24, r22
 280:	0e 94 56 00 	call	0xac	; 0xac <WriteInst>
 284:	08 95       	ret
 286:	82 30       	cpi	r24, 0x02	; 2
 288:	29 f4       	brne	.+10     	; 0x294 <LCD_GoTo+0x2a>
 28a:	84 e9       	ldi	r24, 0x94	; 148
 28c:	86 0f       	add	r24, r22
 28e:	0e 94 56 00 	call	0xac	; 0xac <WriteInst>
 292:	08 95       	ret
 294:	83 30       	cpi	r24, 0x03	; 3
 296:	21 f4       	brne	.+8      	; 0x2a0 <LCD_GoTo+0x36>
 298:	84 ed       	ldi	r24, 0xD4	; 212
 29a:	86 0f       	add	r24, r22
 29c:	0e 94 56 00 	call	0xac	; 0xac <WriteInst>
 2a0:	08 95       	ret

000002a2 <LCD_WriteChar>:
 2a2:	0e 94 b6 00 	call	0x16c	; 0x16c <WriteData>
 2a6:	08 95       	ret

000002a8 <LCD_WriteString>:
 2a8:	0f 93       	push	r16
 2aa:	1f 93       	push	r17
 2ac:	cf 93       	push	r28
 2ae:	8c 01       	movw	r16, r24
 2b0:	c0 e0       	ldi	r28, 0x00	; 0
 2b2:	03 c0       	rjmp	.+6      	; 0x2ba <LCD_WriteString+0x12>
 2b4:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LCD_WriteChar>
 2b8:	cf 5f       	subi	r28, 0xFF	; 255
 2ba:	f8 01       	movw	r30, r16
 2bc:	ec 0f       	add	r30, r28
 2be:	f1 1d       	adc	r31, r1
 2c0:	80 81       	ld	r24, Z
 2c2:	81 11       	cpse	r24, r1
 2c4:	f7 cf       	rjmp	.-18     	; 0x2b4 <LCD_WriteString+0xc>
 2c6:	cf 91       	pop	r28
 2c8:	1f 91       	pop	r17
 2ca:	0f 91       	pop	r16
 2cc:	08 95       	ret

000002ce <LCD_WriteString_GoTo>:
 2ce:	cf 93       	push	r28
 2d0:	df 93       	push	r29
 2d2:	ea 01       	movw	r28, r20
 2d4:	0e 94 35 01 	call	0x26a	; 0x26a <LCD_GoTo>
 2d8:	ce 01       	movw	r24, r28
 2da:	0e 94 54 01 	call	0x2a8	; 0x2a8 <LCD_WriteString>
 2de:	df 91       	pop	r29
 2e0:	cf 91       	pop	r28
 2e2:	08 95       	ret

000002e4 <LCD_WriteNumber_2>:
 2e4:	cf 92       	push	r12
 2e6:	df 92       	push	r13
 2e8:	ef 92       	push	r14
 2ea:	ff 92       	push	r15
 2ec:	1f 93       	push	r17
 2ee:	cf 93       	push	r28
 2f0:	df 93       	push	r29
 2f2:	cd b7       	in	r28, 0x3d	; 61
 2f4:	de b7       	in	r29, 0x3e	; 62
 2f6:	60 97       	sbiw	r28, 0x10	; 16
 2f8:	0f b6       	in	r0, 0x3f	; 63
 2fa:	f8 94       	cli
 2fc:	de bf       	out	0x3e, r29	; 62
 2fe:	0f be       	out	0x3f, r0	; 63
 300:	cd bf       	out	0x3d, r28	; 61
 302:	6b 01       	movw	r12, r22
 304:	7c 01       	movw	r14, r24
 306:	61 15       	cp	r22, r1
 308:	71 05       	cpc	r23, r1
 30a:	81 05       	cpc	r24, r1
 30c:	91 05       	cpc	r25, r1
 30e:	21 f4       	brne	.+8      	; 0x318 <LCD_WriteNumber_2+0x34>
 310:	80 e3       	ldi	r24, 0x30	; 48
 312:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LCD_WriteChar>
 316:	3b c0       	rjmp	.+118    	; 0x38e <LCD_WriteNumber_2+0xaa>
 318:	99 23       	and	r25, r25
 31a:	5c f4       	brge	.+22     	; 0x332 <LCD_WriteNumber_2+0x4e>
 31c:	8d e2       	ldi	r24, 0x2D	; 45
 31e:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LCD_WriteChar>
 322:	f0 94       	com	r15
 324:	e0 94       	com	r14
 326:	d0 94       	com	r13
 328:	c0 94       	com	r12
 32a:	c1 1c       	adc	r12, r1
 32c:	d1 1c       	adc	r13, r1
 32e:	e1 1c       	adc	r14, r1
 330:	f1 1c       	adc	r15, r1
 332:	10 e0       	ldi	r17, 0x00	; 0
 334:	15 c0       	rjmp	.+42     	; 0x360 <LCD_WriteNumber_2+0x7c>
 336:	c7 01       	movw	r24, r14
 338:	b6 01       	movw	r22, r12
 33a:	2a e0       	ldi	r18, 0x0A	; 10
 33c:	30 e0       	ldi	r19, 0x00	; 0
 33e:	40 e0       	ldi	r20, 0x00	; 0
 340:	50 e0       	ldi	r21, 0x00	; 0
 342:	0e 94 b3 07 	call	0xf66	; 0xf66 <__divmodsi4>
 346:	e1 e0       	ldi	r30, 0x01	; 1
 348:	f0 e0       	ldi	r31, 0x00	; 0
 34a:	ec 0f       	add	r30, r28
 34c:	fd 1f       	adc	r31, r29
 34e:	e1 0f       	add	r30, r17
 350:	f1 1d       	adc	r31, r1
 352:	60 5d       	subi	r22, 0xD0	; 208
 354:	60 83       	st	Z, r22
 356:	1f 5f       	subi	r17, 0xFF	; 255
 358:	c2 2e       	mov	r12, r18
 35a:	d3 2e       	mov	r13, r19
 35c:	e4 2e       	mov	r14, r20
 35e:	f5 2e       	mov	r15, r21
 360:	c1 14       	cp	r12, r1
 362:	d1 04       	cpc	r13, r1
 364:	e1 04       	cpc	r14, r1
 366:	f1 04       	cpc	r15, r1
 368:	31 f7       	brne	.-52     	; 0x336 <LCD_WriteNumber_2+0x52>
 36a:	ff 24       	eor	r15, r15
 36c:	fa 94       	dec	r15
 36e:	f1 0e       	add	r15, r17
 370:	0c c0       	rjmp	.+24     	; 0x38a <LCD_WriteNumber_2+0xa6>
 372:	e1 e0       	ldi	r30, 0x01	; 1
 374:	f0 e0       	ldi	r31, 0x00	; 0
 376:	ec 0f       	add	r30, r28
 378:	fd 1f       	adc	r31, r29
 37a:	ef 0d       	add	r30, r15
 37c:	f1 1d       	adc	r31, r1
 37e:	f7 fc       	sbrc	r15, 7
 380:	fa 95       	dec	r31
 382:	80 81       	ld	r24, Z
 384:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LCD_WriteChar>
 388:	fa 94       	dec	r15
 38a:	ff 20       	and	r15, r15
 38c:	94 f7       	brge	.-28     	; 0x372 <LCD_WriteNumber_2+0x8e>
 38e:	60 96       	adiw	r28, 0x10	; 16
 390:	0f b6       	in	r0, 0x3f	; 63
 392:	f8 94       	cli
 394:	de bf       	out	0x3e, r29	; 62
 396:	0f be       	out	0x3f, r0	; 63
 398:	cd bf       	out	0x3d, r28	; 61
 39a:	df 91       	pop	r29
 39c:	cf 91       	pop	r28
 39e:	1f 91       	pop	r17
 3a0:	ff 90       	pop	r15
 3a2:	ef 90       	pop	r14
 3a4:	df 90       	pop	r13
 3a6:	cf 90       	pop	r12
 3a8:	08 95       	ret

000003aa <LCD_Clear_Position>:
{
	WriteInst(0x01);
	_delay_ms(1);
}
void LCD_Clear_Position(u8 line, u8 cell, u8 noCells)
{
 3aa:	cf 93       	push	r28
 3ac:	df 93       	push	r29
 3ae:	d4 2f       	mov	r29, r20
	LCD_GoTo(line,cell);
 3b0:	0e 94 35 01 	call	0x26a	; 0x26a <LCD_GoTo>
	for(u8 i=0; i<noCells; i++)
 3b4:	c0 e0       	ldi	r28, 0x00	; 0
 3b6:	04 c0       	rjmp	.+8      	; 0x3c0 <LCD_Clear_Position+0x16>
	{
		LCD_WriteChar(' ');
 3b8:	80 e2       	ldi	r24, 0x20	; 32
 3ba:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LCD_WriteChar>
	_delay_ms(1);
}
void LCD_Clear_Position(u8 line, u8 cell, u8 noCells)
{
	LCD_GoTo(line,cell);
	for(u8 i=0; i<noCells; i++)
 3be:	cf 5f       	subi	r28, 0xFF	; 255
 3c0:	cd 17       	cp	r28, r29
 3c2:	d0 f3       	brcs	.-12     	; 0x3b8 <LCD_Clear_Position+0xe>
	{
		LCD_WriteChar(' ');
	}
}
 3c4:	df 91       	pop	r29
 3c6:	cf 91       	pop	r28
 3c8:	08 95       	ret

000003ca <ADC_Fun>:
{
	data11 = SPI_SendReceive('S');
}
*/
void ADC_Fun(void)
{
 3ca:	cf 93       	push	r28
 3cc:	df 93       	push	r29
	CLEAR_BIT(ADCSRA,ADEN);
 3ce:	86 b1       	in	r24, 0x06	; 6
 3d0:	8f 77       	andi	r24, 0x7F	; 127
 3d2:	86 b9       	out	0x06, r24	; 6
	if(channelCounter == 0)
 3d4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <channelCounter>
 3d8:	81 11       	cpse	r24, r1
 3da:	0f c0       	rjmp	.+30     	; 0x3fa <ADC_Fun+0x30>
	{
		sensorReadArr[channelCounter] = ADC_GetReadNoblock();
 3dc:	c0 91 bc 00 	lds	r28, 0x00BC	; 0x8000bc <channelCounter>
 3e0:	d0 e0       	ldi	r29, 0x00	; 0
 3e2:	0e 94 52 03 	call	0x6a4	; 0x6a4 <ADC_GetReadNoblock>
 3e6:	cc 0f       	add	r28, r28
 3e8:	dd 1f       	adc	r29, r29
 3ea:	ca 54       	subi	r28, 0x4A	; 74
 3ec:	df 4f       	sbci	r29, 0xFF	; 255
 3ee:	99 83       	std	Y+1, r25	; 0x01
 3f0:	88 83       	st	Y, r24
		channelCounter=1;
 3f2:	81 e0       	ldi	r24, 0x01	; 1
 3f4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <channelCounter>
 3f8:	24 c0       	rjmp	.+72     	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
	}
	else if(channelCounter == 1)
 3fa:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <channelCounter>
 3fe:	81 30       	cpi	r24, 0x01	; 1
 400:	79 f4       	brne	.+30     	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
	{
		sensorReadArr[channelCounter] = ADC_GetReadNoblock();
 402:	c0 91 bc 00 	lds	r28, 0x00BC	; 0x8000bc <channelCounter>
 406:	d0 e0       	ldi	r29, 0x00	; 0
 408:	0e 94 52 03 	call	0x6a4	; 0x6a4 <ADC_GetReadNoblock>
 40c:	cc 0f       	add	r28, r28
 40e:	dd 1f       	adc	r29, r29
 410:	ca 54       	subi	r28, 0x4A	; 74
 412:	df 4f       	sbci	r29, 0xFF	; 255
 414:	99 83       	std	Y+1, r25	; 0x01
 416:	88 83       	st	Y, r24
		channelCounter=2;
 418:	82 e0       	ldi	r24, 0x02	; 2
 41a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <channelCounter>
 41e:	11 c0       	rjmp	.+34     	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
	}
	else if(channelCounter == 2)
 420:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <channelCounter>
 424:	82 30       	cpi	r24, 0x02	; 2
 426:	69 f4       	brne	.+26     	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
	{
		sensorReadArr[channelCounter] = ADC_GetReadNoblock();
 428:	c0 91 bc 00 	lds	r28, 0x00BC	; 0x8000bc <channelCounter>
 42c:	d0 e0       	ldi	r29, 0x00	; 0
 42e:	0e 94 52 03 	call	0x6a4	; 0x6a4 <ADC_GetReadNoblock>
 432:	cc 0f       	add	r28, r28
 434:	dd 1f       	adc	r29, r29
 436:	ca 54       	subi	r28, 0x4A	; 74
 438:	df 4f       	sbci	r29, 0xFF	; 255
 43a:	99 83       	std	Y+1, r25	; 0x01
 43c:	88 83       	st	Y, r24
		channelCounter=0;
 43e:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <channelCounter>
	 if(channelCounter > LM35_CHANNEL)
	 {
		 channelCounter = LDR_CHANNEL;
	 }
	 */
}
 442:	df 91       	pop	r29
 444:	cf 91       	pop	r28
 446:	08 95       	ret

00000448 <Sensor_1>:

void Sensor_1(void)
{
	LCD_Clear_Position(0,0,4);
 448:	44 e0       	ldi	r20, 0x04	; 4
 44a:	60 e0       	ldi	r22, 0x00	; 0
 44c:	80 e0       	ldi	r24, 0x00	; 0
 44e:	0e 94 d5 01 	call	0x3aa	; 0x3aa <LCD_Clear_Position>
	LCD_WriteString_GoTo(1,0,"Sensor 1.");
 452:	48 e9       	ldi	r20, 0x98	; 152
 454:	50 e0       	ldi	r21, 0x00	; 0
 456:	60 e0       	ldi	r22, 0x00	; 0
 458:	81 e0       	ldi	r24, 0x01	; 1
 45a:	0e 94 67 01 	call	0x2ce	; 0x2ce <LCD_WriteString_GoTo>
 45e:	2f e7       	ldi	r18, 0x7F	; 127
 460:	8a e1       	ldi	r24, 0x1A	; 26
 462:	96 e0       	ldi	r25, 0x06	; 6
 464:	21 50       	subi	r18, 0x01	; 1
 466:	80 40       	sbci	r24, 0x00	; 0
 468:	90 40       	sbci	r25, 0x00	; 0
 46a:	e1 f7       	brne	.-8      	; 0x464 <Sensor_1+0x1c>
 46c:	00 c0       	rjmp	.+0      	; 0x46e <Sensor_1+0x26>
 46e:	00 00       	nop
	_delay_ms(250);
	DIO_WritePin(IN_0,LOW);
 470:	60 e0       	ldi	r22, 0x00	; 0
 472:	8a e1       	ldi	r24, 0x1A	; 26
 474:	0e 94 ac 04 	call	0x958	; 0x958 <DIO_WritePin>
 478:	08 95       	ret

0000047a <Sensor_2>:
}
void Sensor_2(void)
{
	LCD_Clear_Position(0,8,4);
 47a:	44 e0       	ldi	r20, 0x04	; 4
 47c:	68 e0       	ldi	r22, 0x08	; 8
 47e:	80 e0       	ldi	r24, 0x00	; 0
 480:	0e 94 d5 01 	call	0x3aa	; 0x3aa <LCD_Clear_Position>
	LCD_WriteString_GoTo(2,0,"Sensor 2.");
 484:	42 ea       	ldi	r20, 0xA2	; 162
 486:	50 e0       	ldi	r21, 0x00	; 0
 488:	60 e0       	ldi	r22, 0x00	; 0
 48a:	82 e0       	ldi	r24, 0x02	; 2
 48c:	0e 94 67 01 	call	0x2ce	; 0x2ce <LCD_WriteString_GoTo>
 490:	2f e7       	ldi	r18, 0x7F	; 127
 492:	8a e1       	ldi	r24, 0x1A	; 26
 494:	96 e0       	ldi	r25, 0x06	; 6
 496:	21 50       	subi	r18, 0x01	; 1
 498:	80 40       	sbci	r24, 0x00	; 0
 49a:	90 40       	sbci	r25, 0x00	; 0
 49c:	e1 f7       	brne	.-8      	; 0x496 <Sensor_2+0x1c>
 49e:	00 c0       	rjmp	.+0      	; 0x4a0 <Sensor_2+0x26>
 4a0:	00 00       	nop
	_delay_ms(250);
	DIO_WritePin(IN_1,LOW);
 4a2:	60 e0       	ldi	r22, 0x00	; 0
 4a4:	8b e1       	ldi	r24, 0x1B	; 27
 4a6:	0e 94 ac 04 	call	0x958	; 0x958 <DIO_WritePin>
 4aa:	08 95       	ret

000004ac <Sensor_3>:
}
void Sensor_3(void)
{
	LCD_Clear_Position(0,15,4);
 4ac:	44 e0       	ldi	r20, 0x04	; 4
 4ae:	6f e0       	ldi	r22, 0x0F	; 15
 4b0:	80 e0       	ldi	r24, 0x00	; 0
 4b2:	0e 94 d5 01 	call	0x3aa	; 0x3aa <LCD_Clear_Position>
	LCD_WriteString_GoTo(3,0,"Sensor 3.");
 4b6:	4c ea       	ldi	r20, 0xAC	; 172
 4b8:	50 e0       	ldi	r21, 0x00	; 0
 4ba:	60 e0       	ldi	r22, 0x00	; 0
 4bc:	83 e0       	ldi	r24, 0x03	; 3
 4be:	0e 94 67 01 	call	0x2ce	; 0x2ce <LCD_WriteString_GoTo>
 4c2:	2f e7       	ldi	r18, 0x7F	; 127
 4c4:	8a e1       	ldi	r24, 0x1A	; 26
 4c6:	96 e0       	ldi	r25, 0x06	; 6
 4c8:	21 50       	subi	r18, 0x01	; 1
 4ca:	80 40       	sbci	r24, 0x00	; 0
 4cc:	90 40       	sbci	r25, 0x00	; 0
 4ce:	e1 f7       	brne	.-8      	; 0x4c8 <Sensor_3+0x1c>
 4d0:	00 c0       	rjmp	.+0      	; 0x4d2 <Sensor_3+0x26>
 4d2:	00 00       	nop
	_delay_ms(250);
	DIO_WritePin(IN_2,LOW);
 4d4:	60 e0       	ldi	r22, 0x00	; 0
 4d6:	8a e0       	ldi	r24, 0x0A	; 10
 4d8:	0e 94 ac 04 	call	0x958	; 0x958 <DIO_WritePin>
 4dc:	08 95       	ret

000004de <main>:
	//UART_TX_SetCallBack(uartTxFun);
	
	//EXI_SetCallBack(EX_INT0,Int0_Fun);
	
	//SPI_SetCallBack(SPI_Func);
	EXI_SetCallBack(EX_INT0,Sensor_1);
 4de:	64 e2       	ldi	r22, 0x24	; 36
 4e0:	72 e0       	ldi	r23, 0x02	; 2
 4e2:	80 e0       	ldi	r24, 0x00	; 0
 4e4:	0e 94 ae 05 	call	0xb5c	; 0xb5c <EXI_SetCallBack>
	EXI_SetCallBack(EX_INT1,Sensor_2);
 4e8:	6d e3       	ldi	r22, 0x3D	; 61
 4ea:	72 e0       	ldi	r23, 0x02	; 2
 4ec:	81 e0       	ldi	r24, 0x01	; 1
 4ee:	0e 94 ae 05 	call	0xb5c	; 0xb5c <EXI_SetCallBack>
	EXI_SetCallBack(EX_INT2,Sensor_3);
 4f2:	66 e5       	ldi	r22, 0x56	; 86
 4f4:	72 e0       	ldi	r23, 0x02	; 2
 4f6:	82 e0       	ldi	r24, 0x02	; 2
 4f8:	0e 94 ae 05 	call	0xb5c	; 0xb5c <EXI_SetCallBack>
	DIO_Init();
 4fc:	0e 94 9c 04 	call	0x938	; 0x938 <DIO_Init>
	LCD_Init();
 500:	0e 94 16 01 	call	0x22c	; 0x22c <LCD_Init>
	KEYPAD_Init();
 504:	0e 94 49 00 	call	0x92	; 0x92 <KEYPAD_Init>
	/*EXI_Init();
	EXI_Enable(EX_INT0);*/
	sei();
 508:	78 94       	sei
	//UART_Init();
	/*SPI_Init(MASTER);
	LCD_WriteString_GoTo(0,0,"master");
	LCD_WriteString_GoTo(1,0,"Read:");
*/
	ADC_Init(VREF_AVCC,ADC_SCALER_64);
 50a:	66 e0       	ldi	r22, 0x06	; 6
 50c:	81 e0       	ldi	r24, 0x01	; 1
 50e:	0e 94 2d 03 	call	0x65a	; 0x65a <ADC_Init>
	ADC_SetCallBack(ADC_Fun);
 512:	85 ee       	ldi	r24, 0xE5	; 229
 514:	91 e0       	ldi	r25, 0x01	; 1
 516:	0e 94 59 03 	call	0x6b2	; 0x6b2 <ADC_SetCallBack>

	EXI_Init();
 51a:	0e 94 a1 05 	call	0xb42	; 0xb42 <EXI_Init>
	
	
	EXI_Enable(EX_INT0);
 51e:	80 e0       	ldi	r24, 0x00	; 0
 520:	0e 94 2f 05 	call	0xa5e	; 0xa5e <EXI_Enable>
	EXI_Enable(EX_INT1);
 524:	81 e0       	ldi	r24, 0x01	; 1
 526:	0e 94 2f 05 	call	0xa5e	; 0xa5e <EXI_Enable>
	EXI_Enable(EX_INT2);
 52a:	82 e0       	ldi	r24, 0x02	; 2
 52c:	0e 94 2f 05 	call	0xa5e	; 0xa5e <EXI_Enable>

	ADC_TailChaining(CH_0);
 530:	80 e0       	ldi	r24, 0x00	; 0
 532:	0e 94 72 03 	call	0x6e4	; 0x6e4 <ADC_TailChaining>
	u16 servo_angle = 0;

	*/

	//Sensors_Init();	
	sei();
 536:	78 94       	sei
 	ADC_InterruptEnable();
 538:	0e 94 55 03 	call	0x6aa	; 0x6aa <ADC_InterruptEnable>
		/*key = KEYPAD_GetKey();
		if(key != 'N')
		{
			UART_Send(key);
		}*/
		DIO_WritePin(IN_0,LOW);
 53c:	60 e0       	ldi	r22, 0x00	; 0
 53e:	8a e1       	ldi	r24, 0x1A	; 26
 540:	0e 94 ac 04 	call	0x958	; 0x958 <DIO_WritePin>
		DIO_WritePin(IN_1,LOW);
 544:	60 e0       	ldi	r22, 0x00	; 0
 546:	8b e1       	ldi	r24, 0x1B	; 27
 548:	0e 94 ac 04 	call	0x958	; 0x958 <DIO_WritePin>
		DIO_WritePin(IN_2,LOW);
 54c:	60 e0       	ldi	r22, 0x00	; 0
 54e:	8a e0       	ldi	r24, 0x0A	; 10
 550:	0e 94 ac 04 	call	0x958	; 0x958 <DIO_WritePin>
		
		if(sensorReadArr[0] > 400)
 554:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <__data_end>
 558:	90 91 b7 00 	lds	r25, 0x00B7	; 0x8000b7 <__data_end+0x1>
 55c:	81 39       	cpi	r24, 0x91	; 145
 55e:	91 40       	sbci	r25, 0x01	; 1
 560:	28 f0       	brcs	.+10     	; 0x56c <main+0x8e>
		{
			DIO_WritePin(IN_0,HIGH);
 562:	61 e0       	ldi	r22, 0x01	; 1
 564:	8a e1       	ldi	r24, 0x1A	; 26
 566:	0e 94 ac 04 	call	0x958	; 0x958 <DIO_WritePin>
 56a:	1a c0       	rjmp	.+52     	; 0x5a0 <main+0xc2>
		}
		else
		{
			LCD_Clear_Position(1,0,10);
 56c:	4a e0       	ldi	r20, 0x0A	; 10
 56e:	60 e0       	ldi	r22, 0x00	; 0
 570:	81 e0       	ldi	r24, 0x01	; 1
 572:	0e 94 d5 01 	call	0x3aa	; 0x3aa <LCD_Clear_Position>
			LCD_Clear_Position(0,0,4);
 576:	44 e0       	ldi	r20, 0x04	; 4
 578:	60 e0       	ldi	r22, 0x00	; 0
 57a:	80 e0       	ldi	r24, 0x00	; 0
 57c:	0e 94 d5 01 	call	0x3aa	; 0x3aa <LCD_Clear_Position>
			LCD_GoTo(0,0);
 580:	60 e0       	ldi	r22, 0x00	; 0
 582:	80 e0       	ldi	r24, 0x00	; 0
 584:	0e 94 35 01 	call	0x26a	; 0x26a <LCD_GoTo>
			LCD_WriteNumber_2(sensorReadArr[0]);
 588:	60 91 b6 00 	lds	r22, 0x00B6	; 0x8000b6 <__data_end>
 58c:	70 91 b7 00 	lds	r23, 0x00B7	; 0x8000b7 <__data_end+0x1>
 590:	80 e0       	ldi	r24, 0x00	; 0
 592:	90 e0       	ldi	r25, 0x00	; 0
 594:	0e 94 72 01 	call	0x2e4	; 0x2e4 <LCD_WriteNumber_2>
			DIO_WritePin(IN_0,LOW);
 598:	60 e0       	ldi	r22, 0x00	; 0
 59a:	8a e1       	ldi	r24, 0x1A	; 26
 59c:	0e 94 ac 04 	call	0x958	; 0x958 <DIO_WritePin>
		}
		
		if(sensorReadArr[1] > 400)
 5a0:	80 91 b8 00 	lds	r24, 0x00B8	; 0x8000b8 <__data_end+0x2>
 5a4:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__data_end+0x3>
 5a8:	81 39       	cpi	r24, 0x91	; 145
 5aa:	91 40       	sbci	r25, 0x01	; 1
 5ac:	28 f0       	brcs	.+10     	; 0x5b8 <main+0xda>
		{
			DIO_WritePin(IN_1,HIGH);
 5ae:	61 e0       	ldi	r22, 0x01	; 1
 5b0:	8b e1       	ldi	r24, 0x1B	; 27
 5b2:	0e 94 ac 04 	call	0x958	; 0x958 <DIO_WritePin>
 5b6:	1a c0       	rjmp	.+52     	; 0x5ec <main+0x10e>
		}
		else
		{
			LCD_Clear_Position(2,0,10);
 5b8:	4a e0       	ldi	r20, 0x0A	; 10
 5ba:	60 e0       	ldi	r22, 0x00	; 0
 5bc:	82 e0       	ldi	r24, 0x02	; 2
 5be:	0e 94 d5 01 	call	0x3aa	; 0x3aa <LCD_Clear_Position>
			LCD_Clear_Position(0,8,4);
 5c2:	44 e0       	ldi	r20, 0x04	; 4
 5c4:	68 e0       	ldi	r22, 0x08	; 8
 5c6:	80 e0       	ldi	r24, 0x00	; 0
 5c8:	0e 94 d5 01 	call	0x3aa	; 0x3aa <LCD_Clear_Position>
			LCD_GoTo(0,8);
 5cc:	68 e0       	ldi	r22, 0x08	; 8
 5ce:	80 e0       	ldi	r24, 0x00	; 0
 5d0:	0e 94 35 01 	call	0x26a	; 0x26a <LCD_GoTo>
			LCD_WriteNumber_2(sensorReadArr[1]);
 5d4:	60 91 b8 00 	lds	r22, 0x00B8	; 0x8000b8 <__data_end+0x2>
 5d8:	70 91 b9 00 	lds	r23, 0x00B9	; 0x8000b9 <__data_end+0x3>
 5dc:	80 e0       	ldi	r24, 0x00	; 0
 5de:	90 e0       	ldi	r25, 0x00	; 0
 5e0:	0e 94 72 01 	call	0x2e4	; 0x2e4 <LCD_WriteNumber_2>
			DIO_WritePin(IN_1,LOW);
 5e4:	60 e0       	ldi	r22, 0x00	; 0
 5e6:	8b e1       	ldi	r24, 0x1B	; 27
 5e8:	0e 94 ac 04 	call	0x958	; 0x958 <DIO_WritePin>
		}
		
		if(sensorReadArr[2] > 400)
 5ec:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <__data_end+0x4>
 5f0:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <__data_end+0x5>
 5f4:	81 39       	cpi	r24, 0x91	; 145
 5f6:	91 40       	sbci	r25, 0x01	; 1
 5f8:	28 f0       	brcs	.+10     	; 0x604 <main+0x126>
		{
			DIO_WritePin(IN_2,HIGH);
 5fa:	61 e0       	ldi	r22, 0x01	; 1
 5fc:	8a e0       	ldi	r24, 0x0A	; 10
 5fe:	0e 94 ac 04 	call	0x958	; 0x958 <DIO_WritePin>
 602:	1a c0       	rjmp	.+52     	; 0x638 <main+0x15a>
		}
		else
		{
			LCD_Clear_Position(3,0,10);
 604:	4a e0       	ldi	r20, 0x0A	; 10
 606:	60 e0       	ldi	r22, 0x00	; 0
 608:	83 e0       	ldi	r24, 0x03	; 3
 60a:	0e 94 d5 01 	call	0x3aa	; 0x3aa <LCD_Clear_Position>
			LCD_Clear_Position(0,15,4);
 60e:	44 e0       	ldi	r20, 0x04	; 4
 610:	6f e0       	ldi	r22, 0x0F	; 15
 612:	80 e0       	ldi	r24, 0x00	; 0
 614:	0e 94 d5 01 	call	0x3aa	; 0x3aa <LCD_Clear_Position>
			LCD_GoTo(0,15);
 618:	6f e0       	ldi	r22, 0x0F	; 15
 61a:	80 e0       	ldi	r24, 0x00	; 0
 61c:	0e 94 35 01 	call	0x26a	; 0x26a <LCD_GoTo>
			LCD_WriteNumber_2(sensorReadArr[2]);
 620:	60 91 ba 00 	lds	r22, 0x00BA	; 0x8000ba <__data_end+0x4>
 624:	70 91 bb 00 	lds	r23, 0x00BB	; 0x8000bb <__data_end+0x5>
 628:	80 e0       	ldi	r24, 0x00	; 0
 62a:	90 e0       	ldi	r25, 0x00	; 0
 62c:	0e 94 72 01 	call	0x2e4	; 0x2e4 <LCD_WriteNumber_2>
			DIO_WritePin(IN_2,LOW);
 630:	60 e0       	ldi	r22, 0x00	; 0
 632:	8a e0       	ldi	r24, 0x0A	; 10
 634:	0e 94 ac 04 	call	0x958	; 0x958 <DIO_WritePin>
		}
		ADC_StartConversion(channelCounter);
 638:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <channelCounter>
 63c:	0e 94 5e 03 	call	0x6bc	; 0x6bc <ADC_StartConversion>
		SET_BIT(ADCSRA,ADEN);
 640:	86 b1       	in	r24, 0x06	; 6
 642:	80 68       	ori	r24, 0x80	; 128
 644:	86 b9       	out	0x06, r24	; 6
 646:	8f ef       	ldi	r24, 0xFF	; 255
 648:	90 e7       	ldi	r25, 0x70	; 112
 64a:	22 e0       	ldi	r18, 0x02	; 2
 64c:	81 50       	subi	r24, 0x01	; 1
 64e:	90 40       	sbci	r25, 0x00	; 0
 650:	20 40       	sbci	r18, 0x00	; 0
 652:	e1 f7       	brne	.-8      	; 0x64c <main+0x16e>
 654:	00 c0       	rjmp	.+0      	; 0x656 <main+0x178>
 656:	00 00       	nop
 658:	71 cf       	rjmp	.-286    	; 0x53c <main+0x5e>

0000065a <ADC_Init>:

u16 ADC_Read_Asynchronous(ADC_Channel_type CH)
{
	ADC_InterruptEnable();
	ADC_StartConversion(CH);
}
 65a:	81 30       	cpi	r24, 0x01	; 1
 65c:	59 f0       	breq	.+22     	; 0x674 <ADC_Init+0x1a>
 65e:	18 f0       	brcs	.+6      	; 0x666 <ADC_Init+0xc>
 660:	82 30       	cpi	r24, 0x02	; 2
 662:	79 f0       	breq	.+30     	; 0x682 <ADC_Init+0x28>
 664:	14 c0       	rjmp	.+40     	; 0x68e <ADC_Init+0x34>
 666:	87 b1       	in	r24, 0x07	; 7
 668:	8f 7b       	andi	r24, 0xBF	; 191
 66a:	87 b9       	out	0x07, r24	; 7
 66c:	87 b1       	in	r24, 0x07	; 7
 66e:	8f 77       	andi	r24, 0x7F	; 127
 670:	87 b9       	out	0x07, r24	; 7
 672:	0d c0       	rjmp	.+26     	; 0x68e <ADC_Init+0x34>
 674:	87 b1       	in	r24, 0x07	; 7
 676:	80 64       	ori	r24, 0x40	; 64
 678:	87 b9       	out	0x07, r24	; 7
 67a:	87 b1       	in	r24, 0x07	; 7
 67c:	8f 77       	andi	r24, 0x7F	; 127
 67e:	87 b9       	out	0x07, r24	; 7
 680:	06 c0       	rjmp	.+12     	; 0x68e <ADC_Init+0x34>
 682:	87 b1       	in	r24, 0x07	; 7
 684:	80 64       	ori	r24, 0x40	; 64
 686:	87 b9       	out	0x07, r24	; 7
 688:	87 b1       	in	r24, 0x07	; 7
 68a:	80 68       	ori	r24, 0x80	; 128
 68c:	87 b9       	out	0x07, r24	; 7
 68e:	86 b1       	in	r24, 0x06	; 6
 690:	88 7f       	andi	r24, 0xF8	; 248
 692:	86 b9       	out	0x06, r24	; 6
 694:	67 70       	andi	r22, 0x07	; 7
 696:	86 b1       	in	r24, 0x06	; 6
 698:	68 2b       	or	r22, r24
 69a:	66 b9       	out	0x06, r22	; 6
 69c:	86 b1       	in	r24, 0x06	; 6
 69e:	80 68       	ori	r24, 0x80	; 128
 6a0:	86 b9       	out	0x06, r24	; 6
 6a2:	08 95       	ret

000006a4 <ADC_GetReadNoblock>:
 6a4:	84 b1       	in	r24, 0x04	; 4
 6a6:	95 b1       	in	r25, 0x05	; 5
 6a8:	08 95       	ret

000006aa <ADC_InterruptEnable>:
 6aa:	86 b1       	in	r24, 0x06	; 6
 6ac:	88 60       	ori	r24, 0x08	; 8
 6ae:	86 b9       	out	0x06, r24	; 6
 6b0:	08 95       	ret

000006b2 <ADC_SetCallBack>:
 6b2:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 6b6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 6ba:	08 95       	ret

000006bc <ADC_StartConversion>:
 6bc:	90 91 bd 00 	lds	r25, 0x00BD	; 0x8000bd <ADC_BusyFlag>
 6c0:	91 11       	cpse	r25, r1
 6c2:	0f c0       	rjmp	.+30     	; 0x6e2 <ADC_StartConversion+0x26>
 6c4:	96 b1       	in	r25, 0x06	; 6
 6c6:	98 60       	ori	r25, 0x08	; 8
 6c8:	96 b9       	out	0x06, r25	; 6
 6ca:	97 b1       	in	r25, 0x07	; 7
 6cc:	90 7e       	andi	r25, 0xE0	; 224
 6ce:	97 b9       	out	0x07, r25	; 7
 6d0:	97 b1       	in	r25, 0x07	; 7
 6d2:	89 2b       	or	r24, r25
 6d4:	87 b9       	out	0x07, r24	; 7
 6d6:	86 b1       	in	r24, 0x06	; 6
 6d8:	80 64       	ori	r24, 0x40	; 64
 6da:	86 b9       	out	0x06, r24	; 6
 6dc:	81 e0       	ldi	r24, 0x01	; 1
 6de:	80 93 bd 00 	sts	0x00BD, r24	; 0x8000bd <ADC_BusyFlag>
 6e2:	08 95       	ret

000006e4 <ADC_TailChaining>:
	}
	
}
void ADC_TailChaining(ADC_Channel_type CH)
{
	ADC_StartConversion(CH_0);
 6e4:	80 e0       	ldi	r24, 0x00	; 0
 6e6:	0e 94 5e 03 	call	0x6bc	; 0x6bc <ADC_StartConversion>
 6ea:	08 95       	ret

000006ec <__vector_16>:
}
ISR(ADC_vect)
{
 6ec:	1f 92       	push	r1
 6ee:	0f 92       	push	r0
 6f0:	0f b6       	in	r0, 0x3f	; 63
 6f2:	0f 92       	push	r0
 6f4:	11 24       	eor	r1, r1
 6f6:	2f 93       	push	r18
 6f8:	3f 93       	push	r19
 6fa:	4f 93       	push	r20
 6fc:	5f 93       	push	r21
 6fe:	6f 93       	push	r22
 700:	7f 93       	push	r23
 702:	8f 93       	push	r24
 704:	9f 93       	push	r25
 706:	af 93       	push	r26
 708:	bf 93       	push	r27
 70a:	ef 93       	push	r30
 70c:	ff 93       	push	r31
	ADC_BusyFlag = 0;
 70e:	10 92 bd 00 	sts	0x00BD, r1	; 0x8000bd <ADC_BusyFlag>
	ADC_Fptr();
 712:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 716:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 71a:	09 95       	icall
 71c:	ff 91       	pop	r31
 71e:	ef 91       	pop	r30
 720:	bf 91       	pop	r27
 722:	af 91       	pop	r26
 724:	9f 91       	pop	r25
 726:	8f 91       	pop	r24
 728:	7f 91       	pop	r23
 72a:	6f 91       	pop	r22
 72c:	5f 91       	pop	r21
 72e:	4f 91       	pop	r20
 730:	3f 91       	pop	r19
 732:	2f 91       	pop	r18
 734:	0f 90       	pop	r0
 736:	0f be       	out	0x3f, r0	; 63
 738:	0f 90       	pop	r0
 73a:	1f 90       	pop	r1
 73c:	18 95       	reti

0000073e <DIO_InitPin>:
	}
}

static void DIO_InitPin(DIO_Pin_type pin, DIO_PinStatus_type status)
{
	u8 pin_num = pin%8;
 73e:	98 2f       	mov	r25, r24
 740:	97 70       	andi	r25, 0x07	; 7
	DIO_Port_type port = pin/8;
 742:	86 95       	lsr	r24
 744:	86 95       	lsr	r24
 746:	86 95       	lsr	r24
	switch(status)
 748:	61 30       	cpi	r22, 0x01	; 1
 74a:	09 f4       	brne	.+2      	; 0x74e <DIO_InitPin+0x10>
 74c:	55 c0       	rjmp	.+170    	; 0x7f8 <DIO_InitPin+0xba>
 74e:	20 f0       	brcs	.+8      	; 0x758 <DIO_InitPin+0x1a>
 750:	62 30       	cpi	r22, 0x02	; 2
 752:	09 f4       	brne	.+2      	; 0x756 <DIO_InitPin+0x18>
 754:	a1 c0       	rjmp	.+322    	; 0x898 <__stack+0x39>
 756:	08 95       	ret
	{
		case OUTPUT:
		switch(port)
 758:	81 30       	cpi	r24, 0x01	; 1
 75a:	c1 f0       	breq	.+48     	; 0x78c <DIO_InitPin+0x4e>
 75c:	28 f0       	brcs	.+10     	; 0x768 <DIO_InitPin+0x2a>
 75e:	82 30       	cpi	r24, 0x02	; 2
 760:	39 f1       	breq	.+78     	; 0x7b0 <DIO_InitPin+0x72>
 762:	83 30       	cpi	r24, 0x03	; 3
 764:	b9 f1       	breq	.+110    	; 0x7d4 <DIO_InitPin+0x96>
 766:	08 95       	ret
		{
			case PA:
			SET_BIT(DDRA,pin_num);
 768:	4a b3       	in	r20, 0x1a	; 26
 76a:	21 e0       	ldi	r18, 0x01	; 1
 76c:	30 e0       	ldi	r19, 0x00	; 0
 76e:	b9 01       	movw	r22, r18
 770:	02 c0       	rjmp	.+4      	; 0x776 <DIO_InitPin+0x38>
 772:	66 0f       	add	r22, r22
 774:	77 1f       	adc	r23, r23
 776:	9a 95       	dec	r25
 778:	e2 f7       	brpl	.-8      	; 0x772 <DIO_InitPin+0x34>
 77a:	cb 01       	movw	r24, r22
 77c:	94 2f       	mov	r25, r20
 77e:	98 2b       	or	r25, r24
 780:	9a bb       	out	0x1a, r25	; 26
			CLEAR_BIT(PORTA,pin_num);
 782:	9b b3       	in	r25, 0x1b	; 27
 784:	80 95       	com	r24
 786:	89 23       	and	r24, r25
 788:	8b bb       	out	0x1b, r24	; 27
			break;
 78a:	08 95       	ret
			
			case PB:
			SET_BIT(DDRB,pin_num);
 78c:	47 b3       	in	r20, 0x17	; 23
 78e:	21 e0       	ldi	r18, 0x01	; 1
 790:	30 e0       	ldi	r19, 0x00	; 0
 792:	b9 01       	movw	r22, r18
 794:	02 c0       	rjmp	.+4      	; 0x79a <DIO_InitPin+0x5c>
 796:	66 0f       	add	r22, r22
 798:	77 1f       	adc	r23, r23
 79a:	9a 95       	dec	r25
 79c:	e2 f7       	brpl	.-8      	; 0x796 <DIO_InitPin+0x58>
 79e:	cb 01       	movw	r24, r22
 7a0:	94 2f       	mov	r25, r20
 7a2:	98 2b       	or	r25, r24
 7a4:	97 bb       	out	0x17, r25	; 23
			CLEAR_BIT(PORTB,pin_num);
 7a6:	98 b3       	in	r25, 0x18	; 24
 7a8:	80 95       	com	r24
 7aa:	89 23       	and	r24, r25
 7ac:	88 bb       	out	0x18, r24	; 24
			break;
 7ae:	08 95       	ret
			
			case PC:
			SET_BIT(DDRC,pin_num);
 7b0:	44 b3       	in	r20, 0x14	; 20
 7b2:	21 e0       	ldi	r18, 0x01	; 1
 7b4:	30 e0       	ldi	r19, 0x00	; 0
 7b6:	b9 01       	movw	r22, r18
 7b8:	02 c0       	rjmp	.+4      	; 0x7be <DIO_InitPin+0x80>
 7ba:	66 0f       	add	r22, r22
 7bc:	77 1f       	adc	r23, r23
 7be:	9a 95       	dec	r25
 7c0:	e2 f7       	brpl	.-8      	; 0x7ba <DIO_InitPin+0x7c>
 7c2:	cb 01       	movw	r24, r22
 7c4:	94 2f       	mov	r25, r20
 7c6:	98 2b       	or	r25, r24
 7c8:	94 bb       	out	0x14, r25	; 20
			CLEAR_BIT(PORTC,pin_num);
 7ca:	95 b3       	in	r25, 0x15	; 21
 7cc:	80 95       	com	r24
 7ce:	89 23       	and	r24, r25
 7d0:	85 bb       	out	0x15, r24	; 21
			break;
 7d2:	08 95       	ret
			
			case PD:
			SET_BIT(DDRD,pin_num);
 7d4:	41 b3       	in	r20, 0x11	; 17
 7d6:	21 e0       	ldi	r18, 0x01	; 1
 7d8:	30 e0       	ldi	r19, 0x00	; 0
 7da:	b9 01       	movw	r22, r18
 7dc:	02 c0       	rjmp	.+4      	; 0x7e2 <DIO_InitPin+0xa4>
 7de:	66 0f       	add	r22, r22
 7e0:	77 1f       	adc	r23, r23
 7e2:	9a 95       	dec	r25
 7e4:	e2 f7       	brpl	.-8      	; 0x7de <DIO_InitPin+0xa0>
 7e6:	cb 01       	movw	r24, r22
 7e8:	94 2f       	mov	r25, r20
 7ea:	98 2b       	or	r25, r24
 7ec:	91 bb       	out	0x11, r25	; 17
			CLEAR_BIT(PORTD,pin_num);
 7ee:	92 b3       	in	r25, 0x12	; 18
 7f0:	80 95       	com	r24
 7f2:	89 23       	and	r24, r25
 7f4:	82 bb       	out	0x12, r24	; 18
			break;
 7f6:	08 95       	ret
		}
		break;
		
		case INFREE:
		switch(port)
 7f8:	81 30       	cpi	r24, 0x01	; 1
 7fa:	c1 f0       	breq	.+48     	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
 7fc:	28 f0       	brcs	.+10     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 7fe:	82 30       	cpi	r24, 0x02	; 2
 800:	39 f1       	breq	.+78     	; 0x850 <__DATA_REGION_LENGTH__+0x50>
 802:	83 30       	cpi	r24, 0x03	; 3
 804:	b9 f1       	breq	.+110    	; 0x874 <__stack+0x15>
 806:	08 95       	ret
		{
			case PA:
			CLEAR_BIT(DDRA,pin_num);
 808:	4a b3       	in	r20, 0x1a	; 26
 80a:	21 e0       	ldi	r18, 0x01	; 1
 80c:	30 e0       	ldi	r19, 0x00	; 0
 80e:	b9 01       	movw	r22, r18
 810:	02 c0       	rjmp	.+4      	; 0x816 <__DATA_REGION_LENGTH__+0x16>
 812:	66 0f       	add	r22, r22
 814:	77 1f       	adc	r23, r23
 816:	9a 95       	dec	r25
 818:	e2 f7       	brpl	.-8      	; 0x812 <__DATA_REGION_LENGTH__+0x12>
 81a:	cb 01       	movw	r24, r22
 81c:	80 95       	com	r24
 81e:	94 2f       	mov	r25, r20
 820:	98 23       	and	r25, r24
 822:	9a bb       	out	0x1a, r25	; 26
			CLEAR_BIT(PORTA,pin_num);
 824:	9b b3       	in	r25, 0x1b	; 27
 826:	89 23       	and	r24, r25
 828:	8b bb       	out	0x1b, r24	; 27
			break;
 82a:	08 95       	ret
			
			case PB:
			CLEAR_BIT(DDRB,pin_num);
 82c:	47 b3       	in	r20, 0x17	; 23
 82e:	21 e0       	ldi	r18, 0x01	; 1
 830:	30 e0       	ldi	r19, 0x00	; 0
 832:	b9 01       	movw	r22, r18
 834:	02 c0       	rjmp	.+4      	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
 836:	66 0f       	add	r22, r22
 838:	77 1f       	adc	r23, r23
 83a:	9a 95       	dec	r25
 83c:	e2 f7       	brpl	.-8      	; 0x836 <__DATA_REGION_LENGTH__+0x36>
 83e:	cb 01       	movw	r24, r22
 840:	80 95       	com	r24
 842:	94 2f       	mov	r25, r20
 844:	98 23       	and	r25, r24
 846:	97 bb       	out	0x17, r25	; 23
			CLEAR_BIT(PORTB,pin_num);
 848:	98 b3       	in	r25, 0x18	; 24
 84a:	89 23       	and	r24, r25
 84c:	88 bb       	out	0x18, r24	; 24
			break;
 84e:	08 95       	ret
			
			case PC:
			CLEAR_BIT(DDRC,pin_num);
 850:	44 b3       	in	r20, 0x14	; 20
 852:	21 e0       	ldi	r18, 0x01	; 1
 854:	30 e0       	ldi	r19, 0x00	; 0
 856:	b9 01       	movw	r22, r18
 858:	02 c0       	rjmp	.+4      	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
 85a:	66 0f       	add	r22, r22
 85c:	77 1f       	adc	r23, r23
 85e:	9a 95       	dec	r25
 860:	e2 f7       	brpl	.-8      	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
 862:	cb 01       	movw	r24, r22
 864:	80 95       	com	r24
 866:	94 2f       	mov	r25, r20
 868:	98 23       	and	r25, r24
 86a:	94 bb       	out	0x14, r25	; 20
			CLEAR_BIT(PORTC,pin_num);
 86c:	95 b3       	in	r25, 0x15	; 21
 86e:	89 23       	and	r24, r25
 870:	85 bb       	out	0x15, r24	; 21
			break;
 872:	08 95       	ret
			
			case PD:
			CLEAR_BIT(DDRD,pin_num);
 874:	41 b3       	in	r20, 0x11	; 17
 876:	21 e0       	ldi	r18, 0x01	; 1
 878:	30 e0       	ldi	r19, 0x00	; 0
 87a:	b9 01       	movw	r22, r18
 87c:	02 c0       	rjmp	.+4      	; 0x882 <__stack+0x23>
 87e:	66 0f       	add	r22, r22
 880:	77 1f       	adc	r23, r23
 882:	9a 95       	dec	r25
 884:	e2 f7       	brpl	.-8      	; 0x87e <__stack+0x1f>
 886:	cb 01       	movw	r24, r22
 888:	80 95       	com	r24
 88a:	94 2f       	mov	r25, r20
 88c:	98 23       	and	r25, r24
 88e:	91 bb       	out	0x11, r25	; 17
			CLEAR_BIT(PORTD,pin_num);
 890:	92 b3       	in	r25, 0x12	; 18
 892:	89 23       	and	r24, r25
 894:	82 bb       	out	0x12, r24	; 18
			break;
 896:	08 95       	ret
		}
		break;
		case INPULL:
		switch(port)
 898:	81 30       	cpi	r24, 0x01	; 1
 89a:	c1 f0       	breq	.+48     	; 0x8cc <__stack+0x6d>
 89c:	28 f0       	brcs	.+10     	; 0x8a8 <__stack+0x49>
 89e:	82 30       	cpi	r24, 0x02	; 2
 8a0:	39 f1       	breq	.+78     	; 0x8f0 <__stack+0x91>
 8a2:	83 30       	cpi	r24, 0x03	; 3
 8a4:	b9 f1       	breq	.+110    	; 0x914 <__stack+0xb5>
 8a6:	08 95       	ret
		{
			case PA:
			CLEAR_BIT(DDRA,pin_num);
 8a8:	4a b3       	in	r20, 0x1a	; 26
 8aa:	21 e0       	ldi	r18, 0x01	; 1
 8ac:	30 e0       	ldi	r19, 0x00	; 0
 8ae:	b9 01       	movw	r22, r18
 8b0:	02 c0       	rjmp	.+4      	; 0x8b6 <__stack+0x57>
 8b2:	66 0f       	add	r22, r22
 8b4:	77 1f       	adc	r23, r23
 8b6:	9a 95       	dec	r25
 8b8:	e2 f7       	brpl	.-8      	; 0x8b2 <__stack+0x53>
 8ba:	cb 01       	movw	r24, r22
 8bc:	96 2f       	mov	r25, r22
 8be:	90 95       	com	r25
 8c0:	94 23       	and	r25, r20
 8c2:	9a bb       	out	0x1a, r25	; 26
			SET_BIT(PORTA,pin_num);
 8c4:	9b b3       	in	r25, 0x1b	; 27
 8c6:	89 2b       	or	r24, r25
 8c8:	8b bb       	out	0x1b, r24	; 27
			break;
 8ca:	08 95       	ret
			
			case PB:
			CLEAR_BIT(DDRB,pin_num);
 8cc:	47 b3       	in	r20, 0x17	; 23
 8ce:	21 e0       	ldi	r18, 0x01	; 1
 8d0:	30 e0       	ldi	r19, 0x00	; 0
 8d2:	b9 01       	movw	r22, r18
 8d4:	02 c0       	rjmp	.+4      	; 0x8da <__stack+0x7b>
 8d6:	66 0f       	add	r22, r22
 8d8:	77 1f       	adc	r23, r23
 8da:	9a 95       	dec	r25
 8dc:	e2 f7       	brpl	.-8      	; 0x8d6 <__stack+0x77>
 8de:	cb 01       	movw	r24, r22
 8e0:	96 2f       	mov	r25, r22
 8e2:	90 95       	com	r25
 8e4:	94 23       	and	r25, r20
 8e6:	97 bb       	out	0x17, r25	; 23
			SET_BIT(PORTB,pin_num);
 8e8:	98 b3       	in	r25, 0x18	; 24
 8ea:	89 2b       	or	r24, r25
 8ec:	88 bb       	out	0x18, r24	; 24
			break;
 8ee:	08 95       	ret
			
			case PC:
			CLEAR_BIT(DDRC,pin_num);
 8f0:	44 b3       	in	r20, 0x14	; 20
 8f2:	21 e0       	ldi	r18, 0x01	; 1
 8f4:	30 e0       	ldi	r19, 0x00	; 0
 8f6:	b9 01       	movw	r22, r18
 8f8:	02 c0       	rjmp	.+4      	; 0x8fe <__stack+0x9f>
 8fa:	66 0f       	add	r22, r22
 8fc:	77 1f       	adc	r23, r23
 8fe:	9a 95       	dec	r25
 900:	e2 f7       	brpl	.-8      	; 0x8fa <__stack+0x9b>
 902:	cb 01       	movw	r24, r22
 904:	96 2f       	mov	r25, r22
 906:	90 95       	com	r25
 908:	94 23       	and	r25, r20
 90a:	94 bb       	out	0x14, r25	; 20
			SET_BIT(PORTC,pin_num);
 90c:	95 b3       	in	r25, 0x15	; 21
 90e:	89 2b       	or	r24, r25
 910:	85 bb       	out	0x15, r24	; 21
			break;
 912:	08 95       	ret
			
			case PD:
			CLEAR_BIT(DDRD,pin_num);
 914:	41 b3       	in	r20, 0x11	; 17
 916:	21 e0       	ldi	r18, 0x01	; 1
 918:	30 e0       	ldi	r19, 0x00	; 0
 91a:	b9 01       	movw	r22, r18
 91c:	02 c0       	rjmp	.+4      	; 0x922 <__stack+0xc3>
 91e:	66 0f       	add	r22, r22
 920:	77 1f       	adc	r23, r23
 922:	9a 95       	dec	r25
 924:	e2 f7       	brpl	.-8      	; 0x91e <__stack+0xbf>
 926:	cb 01       	movw	r24, r22
 928:	96 2f       	mov	r25, r22
 92a:	90 95       	com	r25
 92c:	94 23       	and	r25, r20
 92e:	91 bb       	out	0x11, r25	; 17
			SET_BIT(PORTD,pin_num);
 930:	92 b3       	in	r25, 0x12	; 18
 932:	89 2b       	or	r24, r25
 934:	82 bb       	out	0x12, r24	; 18
 936:	08 95       	ret

00000938 <DIO_Init>:
#include "DIO.h"
#include "DIO_Private.h"
#include "DIO_Cfg.h"

void DIO_Init(void)
{
 938:	cf 93       	push	r28
	DIO_Pin_type i;
	for(i=PINA0; i<TOTAL_PINS; i++)
 93a:	c0 e0       	ldi	r28, 0x00	; 0
 93c:	09 c0       	rjmp	.+18     	; 0x950 <DIO_Init+0x18>
	{
		DIO_InitPin(i,DIO_PinsStatusArr[i]);
 93e:	ec 2f       	mov	r30, r28
 940:	f0 e0       	ldi	r31, 0x00	; 0
 942:	e8 58       	subi	r30, 0x88	; 136
 944:	ff 4f       	sbci	r31, 0xFF	; 255
 946:	60 81       	ld	r22, Z
 948:	8c 2f       	mov	r24, r28
 94a:	0e 94 9f 03 	call	0x73e	; 0x73e <DIO_InitPin>
#include "DIO_Cfg.h"

void DIO_Init(void)
{
	DIO_Pin_type i;
	for(i=PINA0; i<TOTAL_PINS; i++)
 94e:	cf 5f       	subi	r28, 0xFF	; 255
 950:	c0 32       	cpi	r28, 0x20	; 32
 952:	a8 f3       	brcs	.-22     	; 0x93e <DIO_Init+0x6>
	{
		DIO_InitPin(i,DIO_PinsStatusArr[i]);
	}
}
 954:	cf 91       	pop	r28
 956:	08 95       	ret

00000958 <DIO_WritePin>:
}


void DIO_WritePin(DIO_Pin_type pin, DIO_PinVoltage_type volt)
{
	u8 pin_num = pin%8;
 958:	98 2f       	mov	r25, r24
 95a:	97 70       	andi	r25, 0x07	; 7
	DIO_Port_type port = pin/8;
 95c:	86 95       	lsr	r24
 95e:	86 95       	lsr	r24
 960:	86 95       	lsr	r24
	
	if(volt == HIGH)
 962:	61 30       	cpi	r22, 0x01	; 1
 964:	e1 f5       	brne	.+120    	; 0x9de <DIO_WritePin+0x86>
	{
		switch(port)
 966:	81 30       	cpi	r24, 0x01	; 1
 968:	99 f0       	breq	.+38     	; 0x990 <DIO_WritePin+0x38>
 96a:	28 f0       	brcs	.+10     	; 0x976 <DIO_WritePin+0x1e>
 96c:	82 30       	cpi	r24, 0x02	; 2
 96e:	e9 f0       	breq	.+58     	; 0x9aa <DIO_WritePin+0x52>
 970:	83 30       	cpi	r24, 0x03	; 3
 972:	41 f1       	breq	.+80     	; 0x9c4 <DIO_WritePin+0x6c>
 974:	08 95       	ret
		{
			case PA:
			SET_BIT(PORTA,pin_num);
 976:	4b b3       	in	r20, 0x1b	; 27
 978:	21 e0       	ldi	r18, 0x01	; 1
 97a:	30 e0       	ldi	r19, 0x00	; 0
 97c:	b9 01       	movw	r22, r18
 97e:	02 c0       	rjmp	.+4      	; 0x984 <DIO_WritePin+0x2c>
 980:	66 0f       	add	r22, r22
 982:	77 1f       	adc	r23, r23
 984:	9a 95       	dec	r25
 986:	e2 f7       	brpl	.-8      	; 0x980 <DIO_WritePin+0x28>
 988:	cb 01       	movw	r24, r22
 98a:	84 2b       	or	r24, r20
 98c:	8b bb       	out	0x1b, r24	; 27
			break;
 98e:	08 95       	ret
			
			case PB:
			SET_BIT(PORTB,pin_num);
 990:	48 b3       	in	r20, 0x18	; 24
 992:	21 e0       	ldi	r18, 0x01	; 1
 994:	30 e0       	ldi	r19, 0x00	; 0
 996:	b9 01       	movw	r22, r18
 998:	02 c0       	rjmp	.+4      	; 0x99e <DIO_WritePin+0x46>
 99a:	66 0f       	add	r22, r22
 99c:	77 1f       	adc	r23, r23
 99e:	9a 95       	dec	r25
 9a0:	e2 f7       	brpl	.-8      	; 0x99a <DIO_WritePin+0x42>
 9a2:	cb 01       	movw	r24, r22
 9a4:	84 2b       	or	r24, r20
 9a6:	88 bb       	out	0x18, r24	; 24
			break;
 9a8:	08 95       	ret
			
			case PC:
			SET_BIT(PORTC,pin_num);
 9aa:	45 b3       	in	r20, 0x15	; 21
 9ac:	21 e0       	ldi	r18, 0x01	; 1
 9ae:	30 e0       	ldi	r19, 0x00	; 0
 9b0:	b9 01       	movw	r22, r18
 9b2:	02 c0       	rjmp	.+4      	; 0x9b8 <DIO_WritePin+0x60>
 9b4:	66 0f       	add	r22, r22
 9b6:	77 1f       	adc	r23, r23
 9b8:	9a 95       	dec	r25
 9ba:	e2 f7       	brpl	.-8      	; 0x9b4 <DIO_WritePin+0x5c>
 9bc:	cb 01       	movw	r24, r22
 9be:	84 2b       	or	r24, r20
 9c0:	85 bb       	out	0x15, r24	; 21
			break;
 9c2:	08 95       	ret
			
			case PD:
			SET_BIT(PORTD,pin_num);
 9c4:	42 b3       	in	r20, 0x12	; 18
 9c6:	21 e0       	ldi	r18, 0x01	; 1
 9c8:	30 e0       	ldi	r19, 0x00	; 0
 9ca:	b9 01       	movw	r22, r18
 9cc:	02 c0       	rjmp	.+4      	; 0x9d2 <DIO_WritePin+0x7a>
 9ce:	66 0f       	add	r22, r22
 9d0:	77 1f       	adc	r23, r23
 9d2:	9a 95       	dec	r25
 9d4:	e2 f7       	brpl	.-8      	; 0x9ce <DIO_WritePin+0x76>
 9d6:	cb 01       	movw	r24, r22
 9d8:	84 2b       	or	r24, r20
 9da:	82 bb       	out	0x12, r24	; 18
			break;
 9dc:	08 95       	ret
		}
	}
	else
	{
		switch(port)
 9de:	81 30       	cpi	r24, 0x01	; 1
 9e0:	a1 f0       	breq	.+40     	; 0xa0a <DIO_WritePin+0xb2>
 9e2:	28 f0       	brcs	.+10     	; 0x9ee <DIO_WritePin+0x96>
 9e4:	82 30       	cpi	r24, 0x02	; 2
 9e6:	f9 f0       	breq	.+62     	; 0xa26 <DIO_WritePin+0xce>
 9e8:	83 30       	cpi	r24, 0x03	; 3
 9ea:	59 f1       	breq	.+86     	; 0xa42 <DIO_WritePin+0xea>
 9ec:	08 95       	ret
		{
			case PA:
			CLEAR_BIT(PORTA,pin_num);
 9ee:	4b b3       	in	r20, 0x1b	; 27
 9f0:	21 e0       	ldi	r18, 0x01	; 1
 9f2:	30 e0       	ldi	r19, 0x00	; 0
 9f4:	b9 01       	movw	r22, r18
 9f6:	02 c0       	rjmp	.+4      	; 0x9fc <DIO_WritePin+0xa4>
 9f8:	66 0f       	add	r22, r22
 9fa:	77 1f       	adc	r23, r23
 9fc:	9a 95       	dec	r25
 9fe:	e2 f7       	brpl	.-8      	; 0x9f8 <DIO_WritePin+0xa0>
 a00:	cb 01       	movw	r24, r22
 a02:	80 95       	com	r24
 a04:	84 23       	and	r24, r20
 a06:	8b bb       	out	0x1b, r24	; 27
			break;
 a08:	08 95       	ret
			
			case PB:
			CLEAR_BIT(PORTB,pin_num);
 a0a:	48 b3       	in	r20, 0x18	; 24
 a0c:	21 e0       	ldi	r18, 0x01	; 1
 a0e:	30 e0       	ldi	r19, 0x00	; 0
 a10:	b9 01       	movw	r22, r18
 a12:	02 c0       	rjmp	.+4      	; 0xa18 <DIO_WritePin+0xc0>
 a14:	66 0f       	add	r22, r22
 a16:	77 1f       	adc	r23, r23
 a18:	9a 95       	dec	r25
 a1a:	e2 f7       	brpl	.-8      	; 0xa14 <DIO_WritePin+0xbc>
 a1c:	cb 01       	movw	r24, r22
 a1e:	80 95       	com	r24
 a20:	84 23       	and	r24, r20
 a22:	88 bb       	out	0x18, r24	; 24
			break;
 a24:	08 95       	ret
			
			case PC:
			CLEAR_BIT(PORTC,pin_num);
 a26:	45 b3       	in	r20, 0x15	; 21
 a28:	21 e0       	ldi	r18, 0x01	; 1
 a2a:	30 e0       	ldi	r19, 0x00	; 0
 a2c:	b9 01       	movw	r22, r18
 a2e:	02 c0       	rjmp	.+4      	; 0xa34 <DIO_WritePin+0xdc>
 a30:	66 0f       	add	r22, r22
 a32:	77 1f       	adc	r23, r23
 a34:	9a 95       	dec	r25
 a36:	e2 f7       	brpl	.-8      	; 0xa30 <DIO_WritePin+0xd8>
 a38:	cb 01       	movw	r24, r22
 a3a:	80 95       	com	r24
 a3c:	84 23       	and	r24, r20
 a3e:	85 bb       	out	0x15, r24	; 21
			break;
 a40:	08 95       	ret
			
			case PD:
			CLEAR_BIT(PORTD,pin_num);
 a42:	42 b3       	in	r20, 0x12	; 18
 a44:	21 e0       	ldi	r18, 0x01	; 1
 a46:	30 e0       	ldi	r19, 0x00	; 0
 a48:	b9 01       	movw	r22, r18
 a4a:	02 c0       	rjmp	.+4      	; 0xa50 <DIO_WritePin+0xf8>
 a4c:	66 0f       	add	r22, r22
 a4e:	77 1f       	adc	r23, r23
 a50:	9a 95       	dec	r25
 a52:	e2 f7       	brpl	.-8      	; 0xa4c <DIO_WritePin+0xf4>
 a54:	cb 01       	movw	r24, r22
 a56:	80 95       	com	r24
 a58:	84 23       	and	r24, r20
 a5a:	82 bb       	out	0x12, r24	; 18
 a5c:	08 95       	ret

00000a5e <EXI_Enable>:
		break;
		case EX_INT1:
		CLEAR_BIT(GICR,INT1);
		break;
		case EX_INT2:
		CLEAR_BIT(GICR,INT2);
 a5e:	81 30       	cpi	r24, 0x01	; 1
 a60:	41 f0       	breq	.+16     	; 0xa72 <EXI_Enable+0x14>
 a62:	18 f0       	brcs	.+6      	; 0xa6a <EXI_Enable+0xc>
 a64:	82 30       	cpi	r24, 0x02	; 2
 a66:	49 f0       	breq	.+18     	; 0xa7a <EXI_Enable+0x1c>
 a68:	08 95       	ret
 a6a:	8b b7       	in	r24, 0x3b	; 59
 a6c:	80 64       	ori	r24, 0x40	; 64
 a6e:	8b bf       	out	0x3b, r24	; 59
 a70:	08 95       	ret
 a72:	8b b7       	in	r24, 0x3b	; 59
 a74:	80 68       	ori	r24, 0x80	; 128
 a76:	8b bf       	out	0x3b, r24	; 59
 a78:	08 95       	ret
 a7a:	8b b7       	in	r24, 0x3b	; 59
 a7c:	80 62       	ori	r24, 0x20	; 32
 a7e:	8b bf       	out	0x3b, r24	; 59
 a80:	08 95       	ret

00000a82 <EXI_TriggerEdge>:


/************************************Control function*****************************/
void EXI_TriggerEdge(ExInterruptSource_type Interrupt,TriggerEdge_type Edge)
{
	switch(Interrupt){
 a82:	81 30       	cpi	r24, 0x01	; 1
 a84:	49 f1       	breq	.+82     	; 0xad8 <EXI_TriggerEdge+0x56>
 a86:	20 f0       	brcs	.+8      	; 0xa90 <EXI_TriggerEdge+0xe>
 a88:	82 30       	cpi	r24, 0x02	; 2
 a8a:	09 f4       	brne	.+2      	; 0xa8e <EXI_TriggerEdge+0xc>
 a8c:	49 c0       	rjmp	.+146    	; 0xb20 <EXI_TriggerEdge+0x9e>
 a8e:	08 95       	ret
		case EX_INT0:
		switch(Edge){
 a90:	61 30       	cpi	r22, 0x01	; 1
 a92:	69 f0       	breq	.+26     	; 0xaae <EXI_TriggerEdge+0x2c>
 a94:	28 f0       	brcs	.+10     	; 0xaa0 <EXI_TriggerEdge+0x1e>
 a96:	62 30       	cpi	r22, 0x02	; 2
 a98:	89 f0       	breq	.+34     	; 0xabc <EXI_TriggerEdge+0x3a>
 a9a:	63 30       	cpi	r22, 0x03	; 3
 a9c:	b1 f0       	breq	.+44     	; 0xaca <EXI_TriggerEdge+0x48>
 a9e:	08 95       	ret
			case LOW_LEVEL:
			CLEAR_BIT(MCUCR,ISC00);
 aa0:	85 b7       	in	r24, 0x35	; 53
 aa2:	8e 7f       	andi	r24, 0xFE	; 254
 aa4:	85 bf       	out	0x35, r24	; 53
			CLEAR_BIT(MCUCR,ISC01);
 aa6:	85 b7       	in	r24, 0x35	; 53
 aa8:	8d 7f       	andi	r24, 0xFD	; 253
 aaa:	85 bf       	out	0x35, r24	; 53
			break;
 aac:	08 95       	ret
			case ANY_LOGIC_CHANGE:
			SET_BIT(MCUCR,ISC00);
 aae:	85 b7       	in	r24, 0x35	; 53
 ab0:	81 60       	ori	r24, 0x01	; 1
 ab2:	85 bf       	out	0x35, r24	; 53
			CLEAR_BIT(MCUCR,ISC01);
 ab4:	85 b7       	in	r24, 0x35	; 53
 ab6:	8d 7f       	andi	r24, 0xFD	; 253
 ab8:	85 bf       	out	0x35, r24	; 53
			break;
 aba:	08 95       	ret
			case FALLING_EDGE:
			CLEAR_BIT(MCUCR,ISC00);
 abc:	85 b7       	in	r24, 0x35	; 53
 abe:	8e 7f       	andi	r24, 0xFE	; 254
 ac0:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,ISC01);
 ac2:	85 b7       	in	r24, 0x35	; 53
 ac4:	82 60       	ori	r24, 0x02	; 2
 ac6:	85 bf       	out	0x35, r24	; 53
			break;
 ac8:	08 95       	ret
			case RISING_EDGE:
			SET_BIT(MCUCR,ISC00);
 aca:	85 b7       	in	r24, 0x35	; 53
 acc:	81 60       	ori	r24, 0x01	; 1
 ace:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,ISC01);
 ad0:	85 b7       	in	r24, 0x35	; 53
 ad2:	82 60       	ori	r24, 0x02	; 2
 ad4:	85 bf       	out	0x35, r24	; 53
			break;
 ad6:	08 95       	ret
			
		}
		break;
		case EX_INT1:
		switch(Edge){
 ad8:	61 30       	cpi	r22, 0x01	; 1
 ada:	69 f0       	breq	.+26     	; 0xaf6 <EXI_TriggerEdge+0x74>
 adc:	28 f0       	brcs	.+10     	; 0xae8 <EXI_TriggerEdge+0x66>
 ade:	62 30       	cpi	r22, 0x02	; 2
 ae0:	89 f0       	breq	.+34     	; 0xb04 <EXI_TriggerEdge+0x82>
 ae2:	63 30       	cpi	r22, 0x03	; 3
 ae4:	b1 f0       	breq	.+44     	; 0xb12 <EXI_TriggerEdge+0x90>
 ae6:	08 95       	ret
			case LOW_LEVEL:
			CLEAR_BIT(MCUCR,ISC10);
 ae8:	85 b7       	in	r24, 0x35	; 53
 aea:	8b 7f       	andi	r24, 0xFB	; 251
 aec:	85 bf       	out	0x35, r24	; 53
			CLEAR_BIT(MCUCR,ISC11);
 aee:	85 b7       	in	r24, 0x35	; 53
 af0:	87 7f       	andi	r24, 0xF7	; 247
 af2:	85 bf       	out	0x35, r24	; 53
			break;
 af4:	08 95       	ret
			case ANY_LOGIC_CHANGE:
			SET_BIT(MCUCR,ISC10);
 af6:	85 b7       	in	r24, 0x35	; 53
 af8:	84 60       	ori	r24, 0x04	; 4
 afa:	85 bf       	out	0x35, r24	; 53
			CLEAR_BIT(MCUCR,ISC11);
 afc:	85 b7       	in	r24, 0x35	; 53
 afe:	87 7f       	andi	r24, 0xF7	; 247
 b00:	85 bf       	out	0x35, r24	; 53
			break;
 b02:	08 95       	ret
			case FALLING_EDGE:
			CLEAR_BIT(MCUCR,ISC10);
 b04:	85 b7       	in	r24, 0x35	; 53
 b06:	8b 7f       	andi	r24, 0xFB	; 251
 b08:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,ISC11);
 b0a:	85 b7       	in	r24, 0x35	; 53
 b0c:	88 60       	ori	r24, 0x08	; 8
 b0e:	85 bf       	out	0x35, r24	; 53
			break;
 b10:	08 95       	ret
			case RISING_EDGE:
			SET_BIT(MCUCR,ISC10);
 b12:	85 b7       	in	r24, 0x35	; 53
 b14:	84 60       	ori	r24, 0x04	; 4
 b16:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,ISC11);
 b18:	85 b7       	in	r24, 0x35	; 53
 b1a:	88 60       	ori	r24, 0x08	; 8
 b1c:	85 bf       	out	0x35, r24	; 53
			break;
 b1e:	08 95       	ret
			
		}
		break;
		case EX_INT2:
		switch(Edge){
 b20:	62 30       	cpi	r22, 0x02	; 2
 b22:	19 f0       	breq	.+6      	; 0xb2a <EXI_TriggerEdge+0xa8>
 b24:	63 30       	cpi	r22, 0x03	; 3
 b26:	29 f0       	breq	.+10     	; 0xb32 <EXI_TriggerEdge+0xb0>
 b28:	08 c0       	rjmp	.+16     	; 0xb3a <EXI_TriggerEdge+0xb8>
			case FALLING_EDGE:
			CLEAR_BIT(MCUCSR,ISC2);
 b2a:	84 b7       	in	r24, 0x34	; 52
 b2c:	8f 7b       	andi	r24, 0xBF	; 191
 b2e:	84 bf       	out	0x34, r24	; 52
			break;
 b30:	08 95       	ret
			case RISING_EDGE:
			SET_BIT(MCUCSR,ISC2);
 b32:	84 b7       	in	r24, 0x34	; 52
 b34:	80 64       	ori	r24, 0x40	; 64
 b36:	84 bf       	out	0x34, r24	; 52
			break;
 b38:	08 95       	ret
			default:
			CLEAR_BIT(MCUCSR,ISC2);
 b3a:	84 b7       	in	r24, 0x34	; 52
 b3c:	8f 7b       	andi	r24, 0xBF	; 191
 b3e:	84 bf       	out	0x34, r24	; 52
 b40:	08 95       	ret

00000b42 <EXI_Init>:
	}
}

void EXI_Init(void)
{
	EXI_TriggerEdge(EX_INT0,RISING_EDGE);
 b42:	63 e0       	ldi	r22, 0x03	; 3
 b44:	80 e0       	ldi	r24, 0x00	; 0
 b46:	0e 94 41 05 	call	0xa82	; 0xa82 <EXI_TriggerEdge>
	EXI_TriggerEdge(EX_INT1,RISING_EDGE);
 b4a:	63 e0       	ldi	r22, 0x03	; 3
 b4c:	81 e0       	ldi	r24, 0x01	; 1
 b4e:	0e 94 41 05 	call	0xa82	; 0xa82 <EXI_TriggerEdge>
	EXI_TriggerEdge(EX_INT2,RISING_EDGE);
 b52:	63 e0       	ldi	r22, 0x03	; 3
 b54:	82 e0       	ldi	r24, 0x02	; 2
 b56:	0e 94 41 05 	call	0xa82	; 0xa82 <EXI_TriggerEdge>
 b5a:	08 95       	ret

00000b5c <EXI_SetCallBack>:


/************************************Call back functions*********************************************/
void EXI_SetCallBack(ExInterruptSource_type Interrupt,void(*LocalPtr)(void))
{
	switch(Interrupt){
 b5c:	81 30       	cpi	r24, 0x01	; 1
 b5e:	49 f0       	breq	.+18     	; 0xb72 <EXI_SetCallBack+0x16>
 b60:	18 f0       	brcs	.+6      	; 0xb68 <EXI_SetCallBack+0xc>
 b62:	82 30       	cpi	r24, 0x02	; 2
 b64:	59 f0       	breq	.+22     	; 0xb7c <EXI_SetCallBack+0x20>
 b66:	08 95       	ret
		case EX_INT0:
		INT0_Fptr=LocalPtr;
 b68:	70 93 67 00 	sts	0x0067, r23	; 0x800067 <INT0_Fptr+0x1>
 b6c:	60 93 66 00 	sts	0x0066, r22	; 0x800066 <INT0_Fptr>
		break;
 b70:	08 95       	ret
		case EX_INT1:
		INT1_Fptr=LocalPtr;
 b72:	70 93 65 00 	sts	0x0065, r23	; 0x800065 <INT1_Fptr+0x1>
 b76:	60 93 64 00 	sts	0x0064, r22	; 0x800064 <INT1_Fptr>
		break;
 b7a:	08 95       	ret
		case EX_INT2:
		INT2_Fptr=LocalPtr;
 b7c:	70 93 63 00 	sts	0x0063, r23	; 0x800063 <INT2_Fptr+0x1>
 b80:	60 93 62 00 	sts	0x0062, r22	; 0x800062 <INT2_Fptr>
 b84:	08 95       	ret

00000b86 <__vector_1>:
}

/*******************************ISR********************************/

ISR(INT0_vect)
{
 b86:	1f 92       	push	r1
 b88:	0f 92       	push	r0
 b8a:	0f b6       	in	r0, 0x3f	; 63
 b8c:	0f 92       	push	r0
 b8e:	11 24       	eor	r1, r1
 b90:	2f 93       	push	r18
 b92:	3f 93       	push	r19
 b94:	4f 93       	push	r20
 b96:	5f 93       	push	r21
 b98:	6f 93       	push	r22
 b9a:	7f 93       	push	r23
 b9c:	8f 93       	push	r24
 b9e:	9f 93       	push	r25
 ba0:	af 93       	push	r26
 ba2:	bf 93       	push	r27
 ba4:	ef 93       	push	r30
 ba6:	ff 93       	push	r31
	if (INT0_Fptr!=NULLPTR)
 ba8:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <INT0_Fptr>
 bac:	f0 91 67 00 	lds	r31, 0x0067	; 0x800067 <INT0_Fptr+0x1>
 bb0:	e2 30       	cpi	r30, 0x02	; 2
 bb2:	f1 05       	cpc	r31, r1
 bb4:	09 f0       	breq	.+2      	; 0xbb8 <__vector_1+0x32>
	{
		INT0_Fptr();
 bb6:	09 95       	icall
	}	
}
 bb8:	ff 91       	pop	r31
 bba:	ef 91       	pop	r30
 bbc:	bf 91       	pop	r27
 bbe:	af 91       	pop	r26
 bc0:	9f 91       	pop	r25
 bc2:	8f 91       	pop	r24
 bc4:	7f 91       	pop	r23
 bc6:	6f 91       	pop	r22
 bc8:	5f 91       	pop	r21
 bca:	4f 91       	pop	r20
 bcc:	3f 91       	pop	r19
 bce:	2f 91       	pop	r18
 bd0:	0f 90       	pop	r0
 bd2:	0f be       	out	0x3f, r0	; 63
 bd4:	0f 90       	pop	r0
 bd6:	1f 90       	pop	r1
 bd8:	18 95       	reti

00000bda <__vector_2>:
ISR(INT1_vect)
{	
 bda:	1f 92       	push	r1
 bdc:	0f 92       	push	r0
 bde:	0f b6       	in	r0, 0x3f	; 63
 be0:	0f 92       	push	r0
 be2:	11 24       	eor	r1, r1
 be4:	2f 93       	push	r18
 be6:	3f 93       	push	r19
 be8:	4f 93       	push	r20
 bea:	5f 93       	push	r21
 bec:	6f 93       	push	r22
 bee:	7f 93       	push	r23
 bf0:	8f 93       	push	r24
 bf2:	9f 93       	push	r25
 bf4:	af 93       	push	r26
 bf6:	bf 93       	push	r27
 bf8:	ef 93       	push	r30
 bfa:	ff 93       	push	r31
	if (INT1_Fptr!=NULLPTR)
 bfc:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <INT1_Fptr>
 c00:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <INT1_Fptr+0x1>
 c04:	e2 30       	cpi	r30, 0x02	; 2
 c06:	f1 05       	cpc	r31, r1
 c08:	09 f0       	breq	.+2      	; 0xc0c <__vector_2+0x32>
	{
		INT1_Fptr();
 c0a:	09 95       	icall
	}
}
 c0c:	ff 91       	pop	r31
 c0e:	ef 91       	pop	r30
 c10:	bf 91       	pop	r27
 c12:	af 91       	pop	r26
 c14:	9f 91       	pop	r25
 c16:	8f 91       	pop	r24
 c18:	7f 91       	pop	r23
 c1a:	6f 91       	pop	r22
 c1c:	5f 91       	pop	r21
 c1e:	4f 91       	pop	r20
 c20:	3f 91       	pop	r19
 c22:	2f 91       	pop	r18
 c24:	0f 90       	pop	r0
 c26:	0f be       	out	0x3f, r0	; 63
 c28:	0f 90       	pop	r0
 c2a:	1f 90       	pop	r1
 c2c:	18 95       	reti

00000c2e <__vector_3>:
ISR(INT2_vect)
{
 c2e:	1f 92       	push	r1
 c30:	0f 92       	push	r0
 c32:	0f b6       	in	r0, 0x3f	; 63
 c34:	0f 92       	push	r0
 c36:	11 24       	eor	r1, r1
 c38:	2f 93       	push	r18
 c3a:	3f 93       	push	r19
 c3c:	4f 93       	push	r20
 c3e:	5f 93       	push	r21
 c40:	6f 93       	push	r22
 c42:	7f 93       	push	r23
 c44:	8f 93       	push	r24
 c46:	9f 93       	push	r25
 c48:	af 93       	push	r26
 c4a:	bf 93       	push	r27
 c4c:	ef 93       	push	r30
 c4e:	ff 93       	push	r31
	if (INT2_Fptr!=NULLPTR)
 c50:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <INT2_Fptr>
 c54:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <INT2_Fptr+0x1>
 c58:	e2 30       	cpi	r30, 0x02	; 2
 c5a:	f1 05       	cpc	r31, r1
 c5c:	09 f0       	breq	.+2      	; 0xc60 <__vector_3+0x32>
	{
		INT2_Fptr();
 c5e:	09 95       	icall
	}
	
}
 c60:	ff 91       	pop	r31
 c62:	ef 91       	pop	r30
 c64:	bf 91       	pop	r27
 c66:	af 91       	pop	r26
 c68:	9f 91       	pop	r25
 c6a:	8f 91       	pop	r24
 c6c:	7f 91       	pop	r23
 c6e:	6f 91       	pop	r22
 c70:	5f 91       	pop	r21
 c72:	4f 91       	pop	r20
 c74:	3f 91       	pop	r19
 c76:	2f 91       	pop	r18
 c78:	0f 90       	pop	r0
 c7a:	0f be       	out	0x3f, r0	; 63
 c7c:	0f 90       	pop	r0
 c7e:	1f 90       	pop	r1
 c80:	18 95       	reti

00000c82 <__vector_12>:
void SPI_SetCallBack(void (*LocalFptr)(void))
{
	SPI_Fptr = LocalFptr;
}
ISR(SPI_STC_vect)
{
 c82:	1f 92       	push	r1
 c84:	0f 92       	push	r0
 c86:	0f b6       	in	r0, 0x3f	; 63
 c88:	0f 92       	push	r0
 c8a:	11 24       	eor	r1, r1
 c8c:	2f 93       	push	r18
 c8e:	3f 93       	push	r19
 c90:	4f 93       	push	r20
 c92:	5f 93       	push	r21
 c94:	6f 93       	push	r22
 c96:	7f 93       	push	r23
 c98:	8f 93       	push	r24
 c9a:	9f 93       	push	r25
 c9c:	af 93       	push	r26
 c9e:	bf 93       	push	r27
 ca0:	ef 93       	push	r30
 ca2:	ff 93       	push	r31
	if (SPI_Fptr!=NULLPTR)
 ca4:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <SPI_Fptr>
 ca8:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <SPI_Fptr+0x1>
 cac:	e2 30       	cpi	r30, 0x02	; 2
 cae:	f1 05       	cpc	r31, r1
 cb0:	09 f0       	breq	.+2      	; 0xcb4 <__vector_12+0x32>
	{
		SPI_Fptr();
 cb2:	09 95       	icall
	}
 cb4:	ff 91       	pop	r31
 cb6:	ef 91       	pop	r30
 cb8:	bf 91       	pop	r27
 cba:	af 91       	pop	r26
 cbc:	9f 91       	pop	r25
 cbe:	8f 91       	pop	r24
 cc0:	7f 91       	pop	r23
 cc2:	6f 91       	pop	r22
 cc4:	5f 91       	pop	r21
 cc6:	4f 91       	pop	r20
 cc8:	3f 91       	pop	r19
 cca:	2f 91       	pop	r18
 ccc:	0f 90       	pop	r0
 cce:	0f be       	out	0x3f, r0	; 63
 cd0:	0f 90       	pop	r0
 cd2:	1f 90       	pop	r1
 cd4:	18 95       	reti

00000cd6 <__vector_11>:
{
	Timer2_OVF_Fptr=local_fptr;
}
void TIMER2_OC_SetCallBack(void(*local_fptr)(void))
{
	Timer2_OC_Fptr=local_fptr;
 cd6:	1f 92       	push	r1
 cd8:	0f 92       	push	r0
 cda:	0f b6       	in	r0, 0x3f	; 63
 cdc:	0f 92       	push	r0
 cde:	11 24       	eor	r1, r1
 ce0:	2f 93       	push	r18
 ce2:	3f 93       	push	r19
 ce4:	4f 93       	push	r20
 ce6:	5f 93       	push	r21
 ce8:	6f 93       	push	r22
 cea:	7f 93       	push	r23
 cec:	8f 93       	push	r24
 cee:	9f 93       	push	r25
 cf0:	af 93       	push	r26
 cf2:	bf 93       	push	r27
 cf4:	ef 93       	push	r30
 cf6:	ff 93       	push	r31
 cf8:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <Timer0_OVF_Fptr>
 cfc:	f0 91 73 00 	lds	r31, 0x0073	; 0x800073 <Timer0_OVF_Fptr+0x1>
 d00:	e2 30       	cpi	r30, 0x02	; 2
 d02:	f1 05       	cpc	r31, r1
 d04:	09 f0       	breq	.+2      	; 0xd08 <__vector_11+0x32>
 d06:	09 95       	icall
 d08:	ff 91       	pop	r31
 d0a:	ef 91       	pop	r30
 d0c:	bf 91       	pop	r27
 d0e:	af 91       	pop	r26
 d10:	9f 91       	pop	r25
 d12:	8f 91       	pop	r24
 d14:	7f 91       	pop	r23
 d16:	6f 91       	pop	r22
 d18:	5f 91       	pop	r21
 d1a:	4f 91       	pop	r20
 d1c:	3f 91       	pop	r19
 d1e:	2f 91       	pop	r18
 d20:	0f 90       	pop	r0
 d22:	0f be       	out	0x3f, r0	; 63
 d24:	0f 90       	pop	r0
 d26:	1f 90       	pop	r1
 d28:	18 95       	reti

00000d2a <__vector_9>:
 d2a:	1f 92       	push	r1
 d2c:	0f 92       	push	r0
 d2e:	0f b6       	in	r0, 0x3f	; 63
 d30:	0f 92       	push	r0
 d32:	11 24       	eor	r1, r1
 d34:	2f 93       	push	r18
 d36:	3f 93       	push	r19
 d38:	4f 93       	push	r20
 d3a:	5f 93       	push	r21
 d3c:	6f 93       	push	r22
 d3e:	7f 93       	push	r23
 d40:	8f 93       	push	r24
 d42:	9f 93       	push	r25
 d44:	af 93       	push	r26
 d46:	bf 93       	push	r27
 d48:	ef 93       	push	r30
 d4a:	ff 93       	push	r31
 d4c:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <Timer1_OVF_Fptr>
 d50:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <Timer1_OVF_Fptr+0x1>
 d54:	e2 30       	cpi	r30, 0x02	; 2
 d56:	f1 05       	cpc	r31, r1
 d58:	09 f0       	breq	.+2      	; 0xd5c <__vector_9+0x32>
 d5a:	09 95       	icall
 d5c:	ff 91       	pop	r31
 d5e:	ef 91       	pop	r30
 d60:	bf 91       	pop	r27
 d62:	af 91       	pop	r26
 d64:	9f 91       	pop	r25
 d66:	8f 91       	pop	r24
 d68:	7f 91       	pop	r23
 d6a:	6f 91       	pop	r22
 d6c:	5f 91       	pop	r21
 d6e:	4f 91       	pop	r20
 d70:	3f 91       	pop	r19
 d72:	2f 91       	pop	r18
 d74:	0f 90       	pop	r0
 d76:	0f be       	out	0x3f, r0	; 63
 d78:	0f 90       	pop	r0
 d7a:	1f 90       	pop	r1
 d7c:	18 95       	reti

00000d7e <__vector_7>:
 d7e:	1f 92       	push	r1
 d80:	0f 92       	push	r0
 d82:	0f b6       	in	r0, 0x3f	; 63
 d84:	0f 92       	push	r0
 d86:	11 24       	eor	r1, r1
 d88:	2f 93       	push	r18
 d8a:	3f 93       	push	r19
 d8c:	4f 93       	push	r20
 d8e:	5f 93       	push	r21
 d90:	6f 93       	push	r22
 d92:	7f 93       	push	r23
 d94:	8f 93       	push	r24
 d96:	9f 93       	push	r25
 d98:	af 93       	push	r26
 d9a:	bf 93       	push	r27
 d9c:	ef 93       	push	r30
 d9e:	ff 93       	push	r31
 da0:	e0 91 6e 00 	lds	r30, 0x006E	; 0x80006e <Timer1_OCA_Fptr>
 da4:	f0 91 6f 00 	lds	r31, 0x006F	; 0x80006f <Timer1_OCA_Fptr+0x1>
 da8:	e2 30       	cpi	r30, 0x02	; 2
 daa:	f1 05       	cpc	r31, r1
 dac:	09 f0       	breq	.+2      	; 0xdb0 <__vector_7+0x32>
 dae:	09 95       	icall
 db0:	ff 91       	pop	r31
 db2:	ef 91       	pop	r30
 db4:	bf 91       	pop	r27
 db6:	af 91       	pop	r26
 db8:	9f 91       	pop	r25
 dba:	8f 91       	pop	r24
 dbc:	7f 91       	pop	r23
 dbe:	6f 91       	pop	r22
 dc0:	5f 91       	pop	r21
 dc2:	4f 91       	pop	r20
 dc4:	3f 91       	pop	r19
 dc6:	2f 91       	pop	r18
 dc8:	0f 90       	pop	r0
 dca:	0f be       	out	0x3f, r0	; 63
 dcc:	0f 90       	pop	r0
 dce:	1f 90       	pop	r1
 dd0:	18 95       	reti

00000dd2 <__vector_5>:
}
/*********************************Timer 2 ISR functions*********************************************/

ISR(TIMER2_OVF_vect)
{
 dd2:	1f 92       	push	r1
 dd4:	0f 92       	push	r0
 dd6:	0f b6       	in	r0, 0x3f	; 63
 dd8:	0f 92       	push	r0
 dda:	11 24       	eor	r1, r1
 ddc:	2f 93       	push	r18
 dde:	3f 93       	push	r19
 de0:	4f 93       	push	r20
 de2:	5f 93       	push	r21
 de4:	6f 93       	push	r22
 de6:	7f 93       	push	r23
 de8:	8f 93       	push	r24
 dea:	9f 93       	push	r25
 dec:	af 93       	push	r26
 dee:	bf 93       	push	r27
 df0:	ef 93       	push	r30
 df2:	ff 93       	push	r31
	if(Timer2_OVF_Fptr!=NULLPTR)
 df4:	e0 91 6c 00 	lds	r30, 0x006C	; 0x80006c <Timer2_OVF_Fptr>
 df8:	f0 91 6d 00 	lds	r31, 0x006D	; 0x80006d <Timer2_OVF_Fptr+0x1>
 dfc:	e2 30       	cpi	r30, 0x02	; 2
 dfe:	f1 05       	cpc	r31, r1
 e00:	09 f0       	breq	.+2      	; 0xe04 <__vector_5+0x32>
	{
		Timer2_OVF_Fptr();
 e02:	09 95       	icall
	}
}
 e04:	ff 91       	pop	r31
 e06:	ef 91       	pop	r30
 e08:	bf 91       	pop	r27
 e0a:	af 91       	pop	r26
 e0c:	9f 91       	pop	r25
 e0e:	8f 91       	pop	r24
 e10:	7f 91       	pop	r23
 e12:	6f 91       	pop	r22
 e14:	5f 91       	pop	r21
 e16:	4f 91       	pop	r20
 e18:	3f 91       	pop	r19
 e1a:	2f 91       	pop	r18
 e1c:	0f 90       	pop	r0
 e1e:	0f be       	out	0x3f, r0	; 63
 e20:	0f 90       	pop	r0
 e22:	1f 90       	pop	r1
 e24:	18 95       	reti

00000e26 <__vector_4>:


ISR(TIMER2_COMP_vect)
{
 e26:	1f 92       	push	r1
 e28:	0f 92       	push	r0
 e2a:	0f b6       	in	r0, 0x3f	; 63
 e2c:	0f 92       	push	r0
 e2e:	11 24       	eor	r1, r1
 e30:	2f 93       	push	r18
 e32:	3f 93       	push	r19
 e34:	4f 93       	push	r20
 e36:	5f 93       	push	r21
 e38:	6f 93       	push	r22
 e3a:	7f 93       	push	r23
 e3c:	8f 93       	push	r24
 e3e:	9f 93       	push	r25
 e40:	af 93       	push	r26
 e42:	bf 93       	push	r27
 e44:	ef 93       	push	r30
 e46:	ff 93       	push	r31
	if(Timer2_OC_Fptr!=NULLPTR)
 e48:	e0 91 6a 00 	lds	r30, 0x006A	; 0x80006a <Timer2_OC_Fptr>
 e4c:	f0 91 6b 00 	lds	r31, 0x006B	; 0x80006b <Timer2_OC_Fptr+0x1>
 e50:	e2 30       	cpi	r30, 0x02	; 2
 e52:	f1 05       	cpc	r31, r1
 e54:	09 f0       	breq	.+2      	; 0xe58 <__vector_4+0x32>
	{
		Timer2_OC_Fptr();
 e56:	09 95       	icall
	}
}
 e58:	ff 91       	pop	r31
 e5a:	ef 91       	pop	r30
 e5c:	bf 91       	pop	r27
 e5e:	af 91       	pop	r26
 e60:	9f 91       	pop	r25
 e62:	8f 91       	pop	r24
 e64:	7f 91       	pop	r23
 e66:	6f 91       	pop	r22
 e68:	5f 91       	pop	r21
 e6a:	4f 91       	pop	r20
 e6c:	3f 91       	pop	r19
 e6e:	2f 91       	pop	r18
 e70:	0f 90       	pop	r0
 e72:	0f be       	out	0x3f, r0	; 63
 e74:	0f 90       	pop	r0
 e76:	1f 90       	pop	r1
 e78:	18 95       	reti

00000e7a <__vector_13>:
{
	UART_TX_Fptr = LocalFptr;
}

ISR(UART_RXC_vect)
{
 e7a:	1f 92       	push	r1
 e7c:	0f 92       	push	r0
 e7e:	0f b6       	in	r0, 0x3f	; 63
 e80:	0f 92       	push	r0
 e82:	11 24       	eor	r1, r1
 e84:	2f 93       	push	r18
 e86:	3f 93       	push	r19
 e88:	4f 93       	push	r20
 e8a:	5f 93       	push	r21
 e8c:	6f 93       	push	r22
 e8e:	7f 93       	push	r23
 e90:	8f 93       	push	r24
 e92:	9f 93       	push	r25
 e94:	af 93       	push	r26
 e96:	bf 93       	push	r27
 e98:	ef 93       	push	r30
 e9a:	ff 93       	push	r31
	if (UART_RX_Fptr!=NULLPTR)
 e9c:	e0 91 76 00 	lds	r30, 0x0076	; 0x800076 <UART_RX_Fptr>
 ea0:	f0 91 77 00 	lds	r31, 0x0077	; 0x800077 <UART_RX_Fptr+0x1>
 ea4:	e2 30       	cpi	r30, 0x02	; 2
 ea6:	f1 05       	cpc	r31, r1
 ea8:	09 f0       	breq	.+2      	; 0xeac <__vector_13+0x32>
	{
		UART_RX_Fptr();
 eaa:	09 95       	icall
	}
}
 eac:	ff 91       	pop	r31
 eae:	ef 91       	pop	r30
 eb0:	bf 91       	pop	r27
 eb2:	af 91       	pop	r26
 eb4:	9f 91       	pop	r25
 eb6:	8f 91       	pop	r24
 eb8:	7f 91       	pop	r23
 eba:	6f 91       	pop	r22
 ebc:	5f 91       	pop	r21
 ebe:	4f 91       	pop	r20
 ec0:	3f 91       	pop	r19
 ec2:	2f 91       	pop	r18
 ec4:	0f 90       	pop	r0
 ec6:	0f be       	out	0x3f, r0	; 63
 ec8:	0f 90       	pop	r0
 eca:	1f 90       	pop	r1
 ecc:	18 95       	reti

00000ece <__vector_15>:

ISR(UART_TXC_vect)
{
 ece:	1f 92       	push	r1
 ed0:	0f 92       	push	r0
 ed2:	0f b6       	in	r0, 0x3f	; 63
 ed4:	0f 92       	push	r0
 ed6:	11 24       	eor	r1, r1
 ed8:	2f 93       	push	r18
 eda:	3f 93       	push	r19
 edc:	4f 93       	push	r20
 ede:	5f 93       	push	r21
 ee0:	6f 93       	push	r22
 ee2:	7f 93       	push	r23
 ee4:	8f 93       	push	r24
 ee6:	9f 93       	push	r25
 ee8:	af 93       	push	r26
 eea:	bf 93       	push	r27
 eec:	ef 93       	push	r30
 eee:	ff 93       	push	r31
	if (UART_TX_Fptr!=NULLPTR)
 ef0:	e0 91 74 00 	lds	r30, 0x0074	; 0x800074 <UART_TX_Fptr>
 ef4:	f0 91 75 00 	lds	r31, 0x0075	; 0x800075 <UART_TX_Fptr+0x1>
 ef8:	e2 30       	cpi	r30, 0x02	; 2
 efa:	f1 05       	cpc	r31, r1
 efc:	09 f0       	breq	.+2      	; 0xf00 <__vector_15+0x32>
	{
		UART_TX_Fptr();
 efe:	09 95       	icall
	}
 f00:	ff 91       	pop	r31
 f02:	ef 91       	pop	r30
 f04:	bf 91       	pop	r27
 f06:	af 91       	pop	r26
 f08:	9f 91       	pop	r25
 f0a:	8f 91       	pop	r24
 f0c:	7f 91       	pop	r23
 f0e:	6f 91       	pop	r22
 f10:	5f 91       	pop	r21
 f12:	4f 91       	pop	r20
 f14:	3f 91       	pop	r19
 f16:	2f 91       	pop	r18
 f18:	0f 90       	pop	r0
 f1a:	0f be       	out	0x3f, r0	; 63
 f1c:	0f 90       	pop	r0
 f1e:	1f 90       	pop	r1
 f20:	18 95       	reti

00000f22 <__udivmodsi4>:
 f22:	a1 e2       	ldi	r26, 0x21	; 33
 f24:	1a 2e       	mov	r1, r26
 f26:	aa 1b       	sub	r26, r26
 f28:	bb 1b       	sub	r27, r27
 f2a:	fd 01       	movw	r30, r26
 f2c:	0d c0       	rjmp	.+26     	; 0xf48 <__udivmodsi4_ep>

00000f2e <__udivmodsi4_loop>:
 f2e:	aa 1f       	adc	r26, r26
 f30:	bb 1f       	adc	r27, r27
 f32:	ee 1f       	adc	r30, r30
 f34:	ff 1f       	adc	r31, r31
 f36:	a2 17       	cp	r26, r18
 f38:	b3 07       	cpc	r27, r19
 f3a:	e4 07       	cpc	r30, r20
 f3c:	f5 07       	cpc	r31, r21
 f3e:	20 f0       	brcs	.+8      	; 0xf48 <__udivmodsi4_ep>
 f40:	a2 1b       	sub	r26, r18
 f42:	b3 0b       	sbc	r27, r19
 f44:	e4 0b       	sbc	r30, r20
 f46:	f5 0b       	sbc	r31, r21

00000f48 <__udivmodsi4_ep>:
 f48:	66 1f       	adc	r22, r22
 f4a:	77 1f       	adc	r23, r23
 f4c:	88 1f       	adc	r24, r24
 f4e:	99 1f       	adc	r25, r25
 f50:	1a 94       	dec	r1
 f52:	69 f7       	brne	.-38     	; 0xf2e <__udivmodsi4_loop>
 f54:	60 95       	com	r22
 f56:	70 95       	com	r23
 f58:	80 95       	com	r24
 f5a:	90 95       	com	r25
 f5c:	9b 01       	movw	r18, r22
 f5e:	ac 01       	movw	r20, r24
 f60:	bd 01       	movw	r22, r26
 f62:	cf 01       	movw	r24, r30
 f64:	08 95       	ret

00000f66 <__divmodsi4>:
 f66:	05 2e       	mov	r0, r21
 f68:	97 fb       	bst	r25, 7
 f6a:	1e f4       	brtc	.+6      	; 0xf72 <__divmodsi4+0xc>
 f6c:	00 94       	com	r0
 f6e:	0e 94 ca 07 	call	0xf94	; 0xf94 <__negsi2>
 f72:	57 fd       	sbrc	r21, 7
 f74:	07 d0       	rcall	.+14     	; 0xf84 <__divmodsi4_neg2>
 f76:	0e 94 91 07 	call	0xf22	; 0xf22 <__udivmodsi4>
 f7a:	07 fc       	sbrc	r0, 7
 f7c:	03 d0       	rcall	.+6      	; 0xf84 <__divmodsi4_neg2>
 f7e:	4e f4       	brtc	.+18     	; 0xf92 <__divmodsi4_exit>
 f80:	0c 94 ca 07 	jmp	0xf94	; 0xf94 <__negsi2>

00000f84 <__divmodsi4_neg2>:
 f84:	50 95       	com	r21
 f86:	40 95       	com	r20
 f88:	30 95       	com	r19
 f8a:	21 95       	neg	r18
 f8c:	3f 4f       	sbci	r19, 0xFF	; 255
 f8e:	4f 4f       	sbci	r20, 0xFF	; 255
 f90:	5f 4f       	sbci	r21, 0xFF	; 255

00000f92 <__divmodsi4_exit>:
 f92:	08 95       	ret

00000f94 <__negsi2>:
 f94:	90 95       	com	r25
 f96:	80 95       	com	r24
 f98:	70 95       	com	r23
 f9a:	61 95       	neg	r22
 f9c:	7f 4f       	sbci	r23, 0xFF	; 255
 f9e:	8f 4f       	sbci	r24, 0xFF	; 255
 fa0:	9f 4f       	sbci	r25, 0xFF	; 255
 fa2:	08 95       	ret

00000fa4 <_exit>:
 fa4:	f8 94       	cli

00000fa6 <__stop_program>:
 fa6:	ff cf       	rjmp	.-2      	; 0xfa6 <__stop_program>
